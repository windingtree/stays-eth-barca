{
  "address": "0x3Dfe8b4eA8355DB0FEfeC918bADcFD197EF8b705",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CheckIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CheckOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "facilityId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "LodgingFacilityActiveState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "facilityId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "name": "LodgingFacilityCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "facilityId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LodgingFacilityOwnershipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "facilityId",
          "type": "bytes32"
        }
      ],
      "name": "LodgingFacilityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "facilityId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "name": "LodgingFacilityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NewStay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SpaceActiveState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "facilityId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerNightWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "name": "SpaceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        }
      ],
      "name": "SpaceRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePerNightWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "name": "SpaceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        }
      ],
      "name": "activateLodgingFacility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_spaceId",
          "type": "bytes32"
        }
      ],
      "name": "activateSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerNightWei",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_dataURI",
          "type": "string"
        }
      ],
      "name": "addSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStays.CheckInVoucher",
          "name": "voucher",
          "type": "tuple"
        }
      ],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dayZero",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        }
      ],
      "name": "deactivateLodgingFacility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_spaceId",
          "type": "bytes32"
        }
      ],
      "name": "deactivateSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        }
      ],
      "name": "deleteLodgingFacility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "spaceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "depositOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "depositState",
      "outputs": [
        {
          "internalType": "enum IStayEscrow.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveLodgingFacilityIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "activeLodgingFacilityIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        }
      ],
      "name": "getActiveSpaceIdsByFacilityId",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "activeSpacesIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLodgingFacilityIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_spaceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_startDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfDays",
          "type": "uint256"
        }
      ],
      "name": "getAvailability",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        }
      ],
      "name": "getLodgingFacilityById",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getLodgingFacilityIdsByOwner",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "facilities",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_spaceId",
          "type": "bytes32"
        }
      ],
      "name": "getSpaceById",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "lodgingFacilityId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerNightWei",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSpaceByTokenId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "lodgingFacilityId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerNightWei",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        }
      ],
      "name": "getSpaceIdsByFacilityId",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_spaceId",
          "type": "bytes32"
        },
        {
          "internalType": "enum IStayEscrow.State",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "getTokensBySpaceId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lodgingFacilities",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "fren",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_spaceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_startDay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfDays",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "newStay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dataURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "registerLodgingFacility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_dataURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_fren",
          "type": "address"
        }
      ],
      "name": "registerLodgingFacility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "spaces",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "lodgingFacilityId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerNightWei",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "dataURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_newDataURI",
          "type": "string"
        }
      ],
      "name": "updateLodgingFacility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_spaceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pricePerNightWei",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dataURI",
          "type": "string"
        }
      ],
      "name": "updateSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_lodgingFacilityId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "yieldLodgingFacility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47816227cded3bf093f3fb9db8e791dffa777f75c47847cb0ff4e5455afc0164",
  "receipt": {
    "to": null,
    "from": "0xaEC75e3190Cc93AB68AC574c0e447AFfE8c3bE73",
    "contractAddress": "0x3Dfe8b4eA8355DB0FEfeC918bADcFD197EF8b705",
    "transactionIndex": 0,
    "gasUsed": "5567469",
    "logsBloom": "0x
    "blockHash": "0x188341b5993fad372004e8b69dd24c4a7bb37f63c8775186455d45d6cd1140ea",
    "transactionHash": "0x47816227cded3bf093f3fb9db8e791dffa777f75c47847cb0ff4e5455afc0164",
    "logs": [],
    "blockNumber": 21818293,
    "cumulativeGasUsed": "5567469",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "66e82a3e61e6a90efdac1ee9aeb6b5e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CheckIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CheckOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"facilityId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"LodgingFacilityActiveState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"facilityId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"name\":\"LodgingFacilityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"facilityId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LodgingFacilityOwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"facilityId\",\"type\":\"bytes32\"}],\"name\":\"LodgingFacilityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"facilityId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"name\":\"LodgingFacilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewStay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SpaceActiveState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"facilityId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerNightWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"name\":\"SpaceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"}],\"name\":\"SpaceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerNightWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"name\":\"SpaceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"}],\"name\":\"activateLodgingFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_spaceId\",\"type\":\"bytes32\"}],\"name\":\"activateSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerNightWei\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_dataURI\",\"type\":\"string\"}],\"name\":\"addSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IStays.CheckInVoucher\",\"name\":\"voucher\",\"type\":\"tuple\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayZero\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"}],\"name\":\"deactivateLodgingFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_spaceId\",\"type\":\"bytes32\"}],\"name\":\"deactivateSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"}],\"name\":\"deleteLodgingFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"spaceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositState\",\"outputs\":[{\"internalType\":\"enum IStayEscrow.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveLodgingFacilityIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"activeLodgingFacilityIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"}],\"name\":\"getActiveSpaceIdsByFacilityId\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"activeSpacesIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLodgingFacilityIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_spaceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfDays\",\"type\":\"uint256\"}],\"name\":\"getAvailability\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"}],\"name\":\"getLodgingFacilityById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLodgingFacilityIdsByOwner\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"facilities\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_spaceId\",\"type\":\"bytes32\"}],\"name\":\"getSpaceById\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"lodgingFacilityId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerNightWei\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSpaceByTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"lodgingFacilityId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerNightWei\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"}],\"name\":\"getSpaceIdsByFacilityId\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_spaceId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IStayEscrow.State\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"getTokensBySpaceId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lodgingFacilities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"fren\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_spaceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"newStay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"registerLodgingFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_fren\",\"type\":\"address\"}],\"name\":\"registerLodgingFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"spaces\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"lodgingFacilityId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerNightWei\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"dataURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_newDataURI\",\"type\":\"string\"}],\"name\":\"updateLodgingFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_spaceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerNightWei\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dataURI\",\"type\":\"string\"}],\"name\":\"updateSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_lodgingFacilityId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"yieldLodgingFacility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkIn(uint256,(address,address,uint256,bytes))\":{\"notice\":\"CheckIn\"},\"checkOut(uint256)\":{\"notice\":\"CheckOut\"},\"deposit(address,bytes32,uint256)\":{\"notice\":\"Stay escrow\"},\"getAllLodgingFacilityIds()\":{\"notice\":\"Lodging Facilities Getters\"},\"newStay(bytes32,uint256,uint256,uint256)\":{\"notice\":\"Stays\"},\"pause()\":{\"notice\":\"Governance \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stays.sol\":\"Stays\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x805b2b34d4829b892217e5116dc1feb9c67bee2eb7d7b18dac3dbbb91b13e9c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb303bc91198bfd82a8ac2eaf1613352d39d9302dc0084e90224e238ea2f61466\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/IStayEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nabstract contract IStayEscrow {\\n  enum State {\\n    Checkin,\\n    Checkout,\\n    Closed\\n  }\\n\\n  event Deposited(address indexed payee, uint256 weiAmount, bytes32 spaceId, uint256 tokenId);\\n  event Withdraw(address indexed payer, address indexed payee, uint256 weiAmount, bytes32 spaceId, uint256 tokenId);\\n  event Refund(address indexed payee, uint256 weiAmount, bytes32 spaceId, uint256 tokenId);\\n\\n  function depositOf(address payer, bytes32 spaceId, uint256 tokenId) public view virtual returns (uint256);\\n  function depositState(uint256 tokenId) public view virtual returns (State);\\n  function deposit(address payer, bytes32 spaceId, uint256 tokenId) public payable virtual;\\n\\n  // Complete withdraw  - state \\\"Checkout\\\" only\\n  function withdraw(\\n    address payer,\\n    address payable payee,\\n    bytes32 spaceId,\\n    uint256 tokenId\\n  ) internal virtual;\\n\\n  // Partial withdraw - state \\\"Checkin\\\"\\n  function withdraw(\\n    address payer,\\n    address payable payee,\\n    uint256 payment,\\n    bytes32 spaceId,\\n    uint256 tokenId\\n  ) internal virtual;\\n\\n  // Refund deposit\\n  // @todo function refund(address payable payee, bytes32 spaceId, uint256 tokenId) internal virtual;\\n}\\n\",\"keccak256\":\"0x870436fa2e26b650e41a08d8c6ca072cf19c1a13cc3bc10ed28af6f87b1b8160\",\"license\":\"GPL-3.0-only\"},\"contracts/IStays.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStayEscrow.sol\\\";\\n\\n\\nabstract contract IStays is IStayEscrow {\\n\\n  // Check-In voucher\\n  struct CheckInVoucher {\\n    address from;\\n    address to;\\n    uint256 tokenId;\\n    bytes signature;\\n  }\\n\\n  // Events\\n  event LodgingFacilityCreated(bytes32 facilityId, address indexed owner, string dataURI);\\n  event LodgingFacilityUpdated(bytes32 facilityId, string dataURI);\\n  event LodgingFacilityActiveState(bytes32 facilityId, bool active);\\n  event LodgingFacilityOwnershipTransfer(bytes32 facilityId, address indexed prevOwner, address indexed newOwner);\\n  event LodgingFacilityRemoved(bytes32 facilityId);\\n  event SpaceAdded(bytes32 spaceId, bytes32 facilityId, uint256 capacity, uint256 pricePerNightWei, bool active, string dataURI);\\n  event SpaceUpdated(bytes32 spaceId, uint256 capacity, uint256 pricePerNightWei, string dataURI);\\n  event SpaceRemoved(bytes32 spaceId);\\n  event SpaceActiveState(bytes32 spaceId, bool active);\\n  event NewStay(bytes32 spaceId, uint256 tokenId);\\n  event CheckIn(uint256 tokenId);\\n  event CheckOut(uint256 tokenId);\\n  event Cancel(uint256 tokenId);\\n\\n  // To display all availability in Glider: getActiveLodgingFacilityIds, getSpaceIdsByFacilityId, getAvailability\\n  function getAllLodgingFacilityIds() public view virtual returns (bytes32[] memory);\\n  function getActiveLodgingFacilityIds() public view virtual returns (bytes32[] memory);\\n  function getSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (bytes32[] memory);\\n  function getActiveSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (bytes32[] memory);\\n  function getAvailability(bytes32 _spaceId, uint256 _startDay, uint256 _numberOfDays) public view virtual returns (uint256[] memory);\\n\\n  // For the lodging facility owner, to display their facilities\\n  function getLodgingFacilityIdsByOwner(address _owner) public virtual returns (bytes32[] memory);\\n\\n  // Facility and spaces details\\n  function getLodgingFacilityById(bytes32 _lodgingFacilityId) public view virtual returns(\\n    bool exists,\\n    address owner,\\n    bool active,\\n    string memory dataURI\\n  );\\n  function getSpaceById(bytes32 _spaceId) public view virtual returns (\\n    bool exists,\\n    bytes32 lodgingFacilityId,\\n    uint256 capacity,\\n    uint256 pricePerNightWei,\\n    bool active,\\n    string memory dataURI\\n  );\\n\\n  // Tokens by spaces and status\\n  function getTokensBySpaceId(bytes32 _spaceId, State _state) public view virtual returns (uint256[] memory);\\n\\n  // Facility management\\n  function registerLodgingFacility(string calldata _dataURI, bool _active, address _fren) public virtual;\\n  function registerLodgingFacility(string calldata _dataURI, bool _active) public virtual;\\n  function updateLodgingFacility(bytes32 _lodgingFacilityId, string calldata _newDataURI) public virtual;\\n  function activateLodgingFacility(bytes32 _lodgingFacilityId) public virtual;\\n  function deactivateLodgingFacility(bytes32 _lodgingFacilityId) public virtual;\\n  function yieldLodgingFacility(bytes32 _lodgingFacilityId, address _newOwner) public virtual;\\n  function deleteLodgingFacility(bytes32 _lodgingFacilityId) public virtual;\\n\\n  // Space management\\n  function addSpace(bytes32 _lodgingFacilityId, uint256 _capacity, uint256 _pricePerNightWei, bool _active, string calldata _dataURI) public virtual;\\n  function activateSpace(bytes32 _spaceId) public virtual;\\n  function deactivateSpace(bytes32 _spaceId) public virtual;\\n  function updateSpace(bytes32 _spaceId, uint256 _capacity, uint256 _pricePerNightWei, string calldata _dataURI) public virtual;\\n  // @todo function deleteSpace(bytes32 _spaceId) public virtual;\\n\\n  // Delegates (addresses that can perform certain actions, like check-in and check-out)\\n  // function addDelegate(bytes32 _lodgingFacilityId, address _delegate, uint8 _accessLevel) public virtual;\\n  // function changeDelegateAccessLevel(bytes32 _lodgingFacilityId, address _delegate, uint8 _accessLevel) public virtual;\\n  // function removeDelegate(bytes32 _lodgingFacilityId, address _delegate) public virtual;\\n\\n  // Stays\\n  function newStay(bytes32 _spaceId, uint256 _startDay, uint256 _numberOfDays, uint256 _quantity) public payable virtual returns (uint256);\\n  // getting all my Stays is via built-in NFT contract getter\\n  // getting Stay details is via NFT's tokenURI getter\\n  // function getAllStayIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (uint256[] memory);\\n  // function getCurrentStayIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (bytes32[] memory);\\n  // function getFutureStayIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (bytes32[] memory);\\n  function checkIn(uint256 _tokenId, CheckInVoucher memory voucher) public virtual;\\n  function checkOut(uint256 _tokenId) public virtual;\\n  // function cancel(uint256 _tokenId) public virtual;\\n\\n  // function requestChange(uint256 _tokenId, bytes32 _spaceId, uint256 _startDay, uint256 _numberOfDays, uint256 _quantity) public payable virtual;\\n  // function requestCancel(int256 _tokenId) public virtual;\\n  // function requestResponse(uint256 _tokenId, bool _answer) public virtual;\\n  // @todo change my contact information\\n\\n  // Reviews\\n  // @todo leave a LF review\\n  // @todo leave a Guest review\\n  // @todo answer a review\\n  // @todo start a dispute on a review\\n}\",\"keccak256\":\"0x283c1307a5e116bd7f107a1282a4dc10dc988106007496b441633f749c7809f4\",\"license\":\"GPL-3.0-only\"},\"contracts/StayEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IStayEscrow.sol\\\";\\n\\n\\nabstract contract StayEscrow is IStayEscrow {\\n  using Address for address payable;\\n\\n  // spaceId => payer address => tokenId => deposit\\n  mapping(bytes32 => mapping (address => mapping(uint256 => uint256))) internal _deposits;\\n\\n  // tokenId => State\\n  mapping(uint256 => State) private _states;\\n\\n  function depositOf(address payer, bytes32 spaceId, uint256 tokenId) public view override(IStayEscrow) virtual returns (uint256) {\\n    return _deposits[spaceId][payer][tokenId];\\n  }\\n\\n  function depositState(uint256 tokenId) public view override(IStayEscrow) virtual returns (State) {\\n    return _states[tokenId];\\n  }\\n\\n  function deposit(address payer, bytes32 spaceId, uint256 tokenId) public payable override(IStayEscrow) virtual {\\n    uint256 amount = msg.value;\\n    _deposits[spaceId][payer][tokenId] += amount;\\n    _states[tokenId] = State.Checkin;\\n    emit Deposited(payer, amount, spaceId, tokenId);\\n  }\\n\\n  // Complete withdraw\\n  function withdraw(\\n    address payer,\\n    address payable payee,\\n    bytes32 spaceId,\\n    uint256 tokenId\\n  ) internal override(IStayEscrow) virtual {\\n    uint256 payment = _deposits[spaceId][payer][tokenId];\\n\\n    _deposits[spaceId][payer][tokenId] = 0;\\n    _states[tokenId] = State.Closed;\\n\\n    if (payment > 0) {\\n      payee.sendValue(payment);\\n      emit Withdraw(payer, payee, payment, spaceId, tokenId);\\n    }\\n  }\\n\\n  // Partial withdraw - state \\\"Checkin\\\"\\n  function withdraw(\\n    address payer,\\n    address payable payee,\\n    uint256 payment,\\n    bytes32 spaceId,\\n    uint256 tokenId\\n  ) internal override(IStayEscrow) virtual {\\n    require(payment <= _deposits[spaceId][payer][tokenId], \\\"Insufficient funds\\\");\\n\\n    _deposits[spaceId][payer][tokenId] = _deposits[spaceId][payer][tokenId] - payment;\\n    _states[tokenId] = State.Checkout;\\n    payee.sendValue(payment);\\n\\n    emit Withdraw(payer, payee, payment, spaceId, tokenId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x57363598eb0b79e4c9f3b82b1ebcfc01d1decab81276c72bb0ef2c75be1b1551\",\"license\":\"GPL-3.0-only\"},\"contracts/Stays.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./IStays.sol\\\";\\nimport \\\"./StayEscrow.sol\\\";\\nimport \\\"./libraries/StayTokenMeta.sol\\\";\\n\\n\\ncontract Stays is Initializable, ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721URIStorageUpgradeable, EIP712Upgradeable, IStays, StayEscrow, PausableUpgradeable, OwnableUpgradeable {\\n  using Counters for Counters.Counter;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  Counters.Counter private _stayTokenIds;\\n\\n  uint32 public constant dayZero = 1645567342; // 22 Feb 2022\\n  string public constant serviceURI = \\\"https://win.so/\\\";\\n  string private constant tokenImageURI = 'https://bafybeiakjrhbgmv54l4nsdwxxcdfkpeqh33m45asmw6rkwhujryw2qa7n4.ipfs.dweb.link/token.png';\\n\\n  // Lodging Facility is any type of accommodation: hotel, hostel, apartment, etc.\\n  struct LodgingFacility {\\n    address owner;\\n    bool active;\\n    bool exists;\\n    string dataURI;\\n    address fren;\\n  }\\n\\n  // Space = Room Type\\n  struct Space {\\n    bytes32 lodgingFacilityId;\\n    uint256 capacity; // number of rooms of this type\\n    uint256 pricePerNightWei;\\n    bool active;\\n    bool exists;\\n    string dataURI; // must be conformant with \\\"spaceSchemaURI\\\"\\n  }\\n\\n  // Stay\\n  struct Stay {\\n    bytes32 spaceId;\\n    uint256 startDay;\\n    uint256 numberOfDays;\\n    uint256 quantity;\\n    bool checkIn;\\n    bool checkOut;\\n  }\\n\\n  EnumerableSet.Bytes32Set private _lodgingFacilityIds;\\n\\n  // Facility owner => LodgingFacility[]\\n  mapping (address => EnumerableSet.Bytes32Set) private _facilityIdsByOwner;\\n\\n  // facilityId => LodgingFacility\\n  mapping (bytes32 => LodgingFacility) public lodgingFacilities;\\n\\n  // facilityId => spaceId[]\\n  mapping (bytes32 => bytes32[]) private _spaceIdsByFacilityId;\\n\\n  // spaceId => Space\\n  mapping (bytes32 => Space) public spaces;\\n\\n  // spaceId => daysFromDayZero => numberOfBookings\\n  mapping(bytes32 => mapping(uint256 => uint256)) private _booked;\\n\\n  // Stay token => Stay\\n  mapping(uint256 => Stay) private _stays;\\n\\n  // spaceId => tokenId[]\\n  mapping(bytes32 => uint256[]) private _stayTokens;\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() initializer {}\\n\\n  function initialize() initializer public {\\n      __ERC721_init(\\\"Stay Amsterdam\\\", \\\"STAYAMS\\\");\\n      __EIP712_init(\\\"Stay Amsterdam\\\", \\\"1\\\");\\n      __ERC721Enumerable_init();\\n      __ERC721URIStorage_init();\\n        __Pausable_init();\\n        __Ownable_init();\\n  }\\n\\n  /**\\n   * Modifiers\\n   */\\n  modifier onlyLodgingFacilityOwner(bytes32 _lodgingFacilityId) {\\n    require(\\n      _msgSender() == lodgingFacilities[_lodgingFacilityId].owner,\\n      \\\"Only lodging facility owner is allowed\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlySpaceOwner(bytes32 _spaceId) {\\n    require(\\n      _msgSender() == lodgingFacilities[spaces[_spaceId].lodgingFacilityId].owner,\\n      \\\"Only space owner is allowed\\\"\\n    );\\n    _;\\n  }\\n\\n  // modifier onlyTokenOwner(uint256 _tokenId) {\\n  //   require(\\n  //     _msgSender() == ownerOf(_tokenId),\\n  //     \\\"Only stay token owner is allowed\\\"\\n  //   );\\n  //   _;\\n  // }\\n\\n  /**\\n   * Lodging Facilities Getters\\n   */\\n  // All registered Ids\\n  function getAllLodgingFacilityIds() public view override returns (bytes32[] memory) {\\n    return _lodgingFacilityIds.values();\\n  }\\n\\n  // All ACTIVE facilities Ids\\n  function getActiveLodgingFacilityIds() public view override returns (bytes32[] memory activeLodgingFacilityIds) {\\n    activeLodgingFacilityIds = new bytes32[](_getActiveLodgingFacilitiesCount());\\n    uint256 index;\\n\\n    for (uint256 i = 0; i < _lodgingFacilityIds.length(); i++) {\\n      bytes32 lf = _lodgingFacilityIds.at(i);\\n      if (lodgingFacilities[lf].active) {\\n        activeLodgingFacilityIds[index] = lf;\\n        index++;\\n      }\\n    }\\n  }\\n\\n  // All spaces Ids from facility by Id\\n  function getSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public view override returns (bytes32[] memory) {\\n    return _spaceIdsByFacilityId[_lodgingFacilityId];\\n  }\\n\\n  // All ACTIVE spaces Ids from facility by Id\\n  function getActiveSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public view override returns (bytes32[] memory activeSpacesIds) {\\n    activeSpacesIds = new bytes32[](_getActiveSpacesCount(_lodgingFacilityId));\\n    bytes32[] memory facilitiesSpaces = _spaceIdsByFacilityId[_lodgingFacilityId];\\n    uint256 index;\\n\\n    for (uint256 i = 0; i < facilitiesSpaces.length; i++) {\\n      if (spaces[facilitiesSpaces[i]].active) {\\n        activeSpacesIds[index] = facilitiesSpaces[i];\\n        index++;\\n      }\\n    }\\n  }\\n\\n  // Availability of the space\\n  function getAvailability(\\n    bytes32 _spaceId,\\n    uint256 _startDay,\\n    uint256 _numberOfDays\\n  ) public view override returns (uint256[] memory) {\\n    _checkBookingParams(_spaceId, _startDay, _numberOfDays);\\n\\n    Space memory _s = spaces[_spaceId];\\n    uint256[] memory _availability = new uint256[](_numberOfDays);\\n\\n    for (uint256 _x = 0; _x < _numberOfDays; _x++) {\\n      _availability[_x] = _s.capacity - _booked[_spaceId][_startDay + _x];\\n    }\\n\\n    return _availability;\\n  }\\n\\n  // Facilities by owner\\n  function getLodgingFacilityIdsByOwner(address _owner) public view override returns (bytes32[] memory facilities) {\\n    facilities = _facilityIdsByOwner[_owner].values();\\n  }\\n\\n  // Facility details\\n  function getLodgingFacilityById(bytes32 _lodgingFacilityId) public view override returns(\\n    bool exists,\\n    address owner,\\n    bool active,\\n    string memory dataURI\\n  ) {\\n    LodgingFacility storage facility = lodgingFacilities[_lodgingFacilityId];\\n    exists = facility.exists;\\n    owner = facility.owner;\\n    active = facility.active;\\n    dataURI = facility.dataURI;\\n  }\\n\\n  // Space details\\n  function getSpaceById(bytes32 _spaceId) public view override returns (\\n    bool exists,\\n    bytes32 lodgingFacilityId,\\n    uint256 capacity,\\n    uint256 pricePerNightWei,\\n    bool active,\\n    string memory dataURI\\n  ) {\\n    Space storage space = spaces[_spaceId];\\n    exists = space.exists;\\n    lodgingFacilityId = space.lodgingFacilityId;\\n    capacity = space.capacity;\\n    pricePerNightWei = space.pricePerNightWei;\\n    active = space.active;\\n    dataURI = space.dataURI;\\n  }\\n\\n  // Returns a space details by Stay token Id\\n  function getSpaceByTokenId(uint256 _tokenId) public view returns (\\n    bool exists,\\n    bytes32 lodgingFacilityId,\\n    uint256 capacity,\\n    uint256 pricePerNightWei,\\n    bool active,\\n    string memory dataURI\\n  ) {\\n    return getSpaceById(_stays[_tokenId].spaceId);\\n  }\\n\\n  // Get tokens Ids for a space filtered by a status\\n  function getTokensBySpaceId(\\n    bytes32 _spaceId,\\n    State _state\\n  ) public view override returns (uint256[] memory) {\\n    uint256[] storage _tokens = _stayTokens[_spaceId];\\n    uint256 count;\\n\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      if (depositState(_tokens[i]) == _state) {\\n        count++;\\n      }\\n    }\\n\\n    uint256[] memory _stateTokens = new uint256[](count);\\n    uint256 index;\\n\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      if (depositState(_tokens[i]) == _state) {\\n        _stateTokens[index] = _tokens[i];\\n        index++;\\n      }\\n    }\\n\\n    return _stateTokens;\\n  }\\n\\n  /*\\n   * Lodging Facilities Management\\n   */\\n\\n  // Lodging Facility registration (with fren option)\\n  function registerLodgingFacility(\\n    string calldata _dataURI,\\n    bool _active,\\n    address _fren\\n  )\\n    public override whenNotPaused\\n  {\\n    _dataUriMustBeProvided(_dataURI);\\n\\n    bytes32 _id = keccak256(\\n      abi.encodePacked(\\n        _msgSender(),\\n        _dataURI\\n      )\\n    );\\n\\n    require(!lodgingFacilities[_id].exists, \\\"Facility already exists\\\");\\n\\n    lodgingFacilities[_id] = LodgingFacility(\\n      _msgSender(),\\n      _active,\\n      true,\\n      _dataURI,\\n      _fren\\n    );\\n    _lodgingFacilityIds.add(_id);\\n    _facilityIdsByOwner[_msgSender()].add(_id);\\n\\n    emit LodgingFacilityCreated(_id, _msgSender(), _dataURI);\\n  }\\n\\n  // Lodging Facility registration (WITHOUT fren option)\\n  function registerLodgingFacility(string calldata _dataURI, bool _active)\\n    public override whenNotPaused\\n  {\\n    return registerLodgingFacility(_dataURI, _active, address(0));\\n  }\\n\\n  function updateLodgingFacility(\\n    bytes32 _lodgingFacilityId,\\n    string calldata _newDataURI\\n  ) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\\n    _dataUriMustBeProvided(_newDataURI);\\n    lodgingFacilities[_lodgingFacilityId].dataURI = _newDataURI;\\n    emit LodgingFacilityUpdated(_lodgingFacilityId, _newDataURI);\\n  }\\n\\n  function activateLodgingFacility(bytes32 _lodgingFacilityId) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\\n    lodgingFacilities[_lodgingFacilityId].active = true;\\n    emit LodgingFacilityActiveState(_lodgingFacilityId, true);\\n  }\\n\\n  function deactivateLodgingFacility(bytes32 _lodgingFacilityId) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\\n    lodgingFacilities[_lodgingFacilityId].active = false;\\n    emit LodgingFacilityActiveState(_lodgingFacilityId, false);\\n  }\\n\\n  // @todo fix _facilityIdsByOwner[_owner] array\\n  function yieldLodgingFacility(bytes32 _lodgingFacilityId, address _newOwner) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\\n    // add to the new owner\\n    _facilityIdsByOwner[_newOwner].add(_lodgingFacilityId);\\n    // remove from the old owner\\n    _facilityIdsByOwner[lodgingFacilities[_lodgingFacilityId].owner].remove(_lodgingFacilityId);\\n\\n    lodgingFacilities[_lodgingFacilityId].owner = _newOwner;\\n    emit LodgingFacilityOwnershipTransfer(_lodgingFacilityId, lodgingFacilities[_lodgingFacilityId].owner, _newOwner);\\n\\n  }\\n\\n  function deleteLodgingFacility(bytes32 _lodgingFacilityId) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\\n    lodgingFacilities[_lodgingFacilityId].exists = false;\\n    emit LodgingFacilityRemoved(_lodgingFacilityId);\\n  }\\n\\n  /*\\n   * Spaces\\n   */\\n  function addSpace(\\n    bytes32 _lodgingFacilityId,\\n    uint256 _capacity,\\n    uint256 _pricePerNightWei,\\n    bool _active,\\n    string calldata _dataURI\\n  ) public override whenNotPaused {\\n    bytes32 _i = _lodgingFacilityId;\\n\\n    _facilityShouldExist(_i);\\n    _shouldOnlyBeCalledByOwner(_i, \\\"Only facility owner may add Spaces\\\");\\n    _dataUriMustBeProvided(_dataURI);\\n\\n    bytes32 _id = keccak256(abi.encodePacked(\\n      _i,\\n      _dataURI\\n    ));\\n\\n    require(!spaces[_id].exists, \\\"Space already exists\\\");\\n\\n    spaces[_id] = Space(\\n      _i,\\n      _capacity,\\n      _pricePerNightWei,\\n      _active,\\n      true,\\n      _dataURI\\n    );\\n    _spaceIdsByFacilityId[_i].push(_id);\\n\\n    emit SpaceAdded(_id, _i, _capacity, _pricePerNightWei, _active, _dataURI);\\n  }\\n\\n  function updateSpace(\\n    bytes32 _spaceId,\\n    uint256 _capacity,\\n    uint256 _pricePerNightWei,\\n    string calldata _dataURI\\n  ) public override onlySpaceOwner(_spaceId) {\\n    Space storage space = spaces[_spaceId];\\n    space.capacity = _capacity;\\n    space.pricePerNightWei = _pricePerNightWei;\\n    space.dataURI = _dataURI;\\n\\n    emit SpaceUpdated(\\n      _spaceId,\\n      _capacity,\\n      _pricePerNightWei,\\n      _dataURI\\n    );\\n  }\\n\\n  function activateSpace(bytes32 _spaceId) public override onlySpaceOwner(_spaceId) {\\n    spaces[_spaceId].active = true;\\n    emit SpaceActiveState(_spaceId, true);\\n  }\\n\\n  function deactivateSpace(bytes32 _spaceId) public override onlySpaceOwner(_spaceId) {\\n    spaces[_spaceId].active = false;\\n    emit SpaceActiveState(_spaceId, false);\\n  }\\n\\n  /**\\n   * Stay escrow\\n   */\\n\\n  function deposit(\\n    address payee,\\n    bytes32 spaceId,\\n    uint256 tokenId\\n  ) public payable override(IStayEscrow, StayEscrow) {\\n    super.deposit(payee, spaceId, tokenId);\\n  }\\n\\n  // Complete withdraw. Allowed in Checkout deposit state only\\n  function withdraw(\\n    address payer,\\n    address payable payee,\\n    bytes32 _spaceId,\\n    uint256 tokenId\\n  )\\n    internal override(IStayEscrow, StayEscrow)\\n  {\\n    super.withdraw(payer, payee, _spaceId, tokenId);\\n  }\\n\\n  // Partial withdraw\\n  function withdraw(\\n    address payer,\\n    address payable payee,\\n    uint256 payment,\\n    bytes32 _spaceId,\\n    uint256 tokenId\\n  ) internal override(IStayEscrow, StayEscrow) {\\n    // partial withdraw condition\\n    require(\\n      payment <= spaces[_spaceId].pricePerNightWei,\\n      \\\"Withdraw amount not allowed in this state\\\"\\n    );\\n    super.withdraw(payer, payee, payment, _spaceId, tokenId);\\n  }\\n\\n  /**\\n   * Stays\\n   */\\n\\n  // Book a new stay in a space\\n  function newStay(\\n    bytes32 _spaceId,\\n    uint256 _startDay,\\n    uint256 _numberOfDays,\\n    uint256 _quantity\\n  ) public payable override whenNotPaused returns (uint256) {\\n    _checkBookingParams(_spaceId, _startDay, _numberOfDays);\\n\\n    Space storage _s = spaces[_spaceId];\\n    uint256 _stayPrice = _numberOfDays * _quantity * _s.pricePerNightWei;\\n\\n    require(msg.value >= _stayPrice, \\\"Need. More. Money!\\\");\\n\\n    for (uint256 _x = 0; _x < _numberOfDays; _x++) {\\n      require(\\n        _s.capacity - _booked[_spaceId][_startDay+_x] >= _quantity,\\n        \\\"Insufficient inventory\\\"\\n      );\\n      _booked[_spaceId][_startDay+_x] += _quantity;\\n    }\\n\\n    _stayTokenIds.increment();\\n    uint256 _newStayTokenId = _stayTokenIds.current();\\n    _safeMint(_msgSender(), _newStayTokenId);\\n\\n    // Inline tokenURI (data:application/json;base64)\\n    string memory _tokenURI = StayTokenMeta.createTokenUri(\\n      _newStayTokenId,\\n      _s.lodgingFacilityId,\\n      _spaceId,\\n      _startDay,\\n      _numberOfDays,\\n      _quantity,\\n      tokenImageURI,\\n      serviceURI\\n    );\\n    _setTokenURI(_newStayTokenId, _tokenURI);\\n\\n    _stays[_newStayTokenId] = Stay(\\n      _spaceId,\\n      _startDay,\\n      _numberOfDays,\\n      _quantity,\\n      false,\\n      false\\n    );\\n    _stayTokens[_spaceId].push(_newStayTokenId);\\n\\n    deposit(_msgSender(), _spaceId, _newStayTokenId);\\n\\n    emit NewStay(_spaceId, _newStayTokenId);\\n\\n    return _newStayTokenId;\\n  }\\n\\n  /**\\n   * CheckIn\\n   */\\n\\n  // Stay checkIn; can be called by a stay token owner\\n  function checkIn(\\n    uint256 _tokenId,\\n    CheckInVoucher memory voucher\\n  ) public override {\\n    address recovered = _verifyCheckInVoucher(voucher);\\n\\n    Stay storage _stay = _stays[_tokenId];\\n    bytes32 _spaceId = _stay.spaceId;\\n\\n    require(_spaceId != bytes32(0), \\\"Stay not found\\\");\\n    require(!_stay.checkIn, \\\"Already checked in\\\");\\n\\n    Space storage _space = spaces[_spaceId];\\n    LodgingFacility storage _lodgingFacility = lodgingFacilities[_space.lodgingFacilityId];\\n\\n    require(\\n      recovered == ownerOf(_tokenId) || recovered == _lodgingFacility.owner,\\n      \\\"Voucher signer is not allowed\\\"\\n    );\\n    require(\\n      _msgSender() == voucher.to,\\n      \\\"Wrong caller\\\"\\n    );\\n\\n    uint256 firstNight = _deposits[_stay.spaceId][recovered][_tokenId] / _stay.numberOfDays;\\n\\n    // Partial withdraw, just for a first night\\n    _stay.checkIn = true;\\n    withdraw(\\n      ownerOf(_tokenId),\\n      payable(_lodgingFacility.owner),\\n      firstNight,\\n      _spaceId,\\n      _tokenId\\n    );\\n\\n    emit CheckIn(_tokenId);\\n  }\\n\\n  /**\\n   * CheckOut\\n   */\\n\\n  function checkOut(uint256 _tokenId) public virtual override {\\n    Stay storage _stay = _stays[_tokenId];\\n\\n    require(_stay.spaceId != bytes32(0), \\\"Stay not found\\\");\\n    require(!_stay.checkOut, \\\"Already checked out\\\");\\n\\n    bytes32 _spaceId = _stay.spaceId;\\n    address spaceOwner = lodgingFacilities[spaces[_spaceId].lodgingFacilityId].owner;\\n\\n    require(\\n      _msgSender() == spaceOwner,\\n      \\\"Only space owner is allowed\\\"\\n    );\\n    // CheckOut condition by time\\n    require(\\n      block.timestamp >= dayZero + (_stay.startDay + _stay.numberOfDays) * 86400,\\n      \\\"Forbidden unless checkout date\\\"\\n    );\\n\\n    // Complete withdraw (rest of deposit)\\n    _stay.checkOut = true;\\n    withdraw(\\n      ownerOf(_tokenId),\\n      payable(spaceOwner),\\n      _spaceId,\\n      _tokenId\\n    );\\n\\n    emit CheckOut(_tokenId);\\n  }\\n\\n  /*\\n   * Helpers\\n   */\\n\\n  function _facilityShouldExist(bytes32 _i) internal view {\\n    require(lodgingFacilities[_i].exists, \\\"Facility does not exist\\\");\\n  }\\n\\n  function _shouldOnlyBeCalledByOwner(bytes32 _i, string memory _message) internal view {\\n    require(lodgingFacilities[_i].owner == _msgSender(), _message);\\n  }\\n\\n  function _dataUriMustBeProvided(string memory _uri) internal pure {\\n    require(bytes(_uri).length > 0, \\\"Data URI must be provided\\\");\\n  }\\n\\n  function _checkBookingParams(bytes32 _spaceId, uint256 _startDay, uint256 _numberOfDays) internal view {\\n    require(dayZero + _startDay * 86400 > block.timestamp - 86400 * 2, \\\"Don't stay in the past\\\");\\n    require(lodgingFacilities[spaces[_spaceId].lodgingFacilityId].active, \\\"Lodging Facility is inactive\\\");\\n    require(spaces[_spaceId].active, \\\"Space is inactive\\\");\\n    require(_numberOfDays > 0, \\\"Number of days should be 1 or more\\\");\\n  }\\n\\n  function _getActiveLodgingFacilitiesCount() internal view returns (uint256 count) {\\n    for (uint256 i = 0; i < _lodgingFacilityIds.length(); i++) {\\n      if (lodgingFacilities[_lodgingFacilityIds.at(i)].active) {\\n        count++;\\n      }\\n    }\\n  }\\n\\n  function _getActiveSpacesCount(bytes32 _lodgingFacilityId) internal view returns (uint256 count) {\\n    bytes32[] storage facilitiesSpaces = _spaceIdsByFacilityId[_lodgingFacilityId];\\n\\n    for (uint256 i = 0; i < facilitiesSpaces.length; i++) {\\n      if (spaces[facilitiesSpaces[i]].active) {\\n        count++;\\n      }\\n    }\\n  }\\n\\n  // Throws an error if verification of a voucher is fails\\n  function _verifyCheckInVoucher(CheckInVoucher memory voucher) internal view returns (address) {\\n    bytes32 voucherHash = _hashTypedDataV4(\\n      keccak256(\\n        abi.encode(\\n          keccak256(\\\"Voucher(address from,address to,uint256 tokenId)\\\"),\\n          voucher.from,\\n          voucher.to,\\n          voucher.tokenId\\n        )\\n      )\\n    );\\n\\n    (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(voucherHash, voucher.signature);\\n\\n    require(\\n      error == ECDSA.RecoverError.NoError && recovered == voucher.from,\\n      \\\"Broken voucher\\\"\\n    );\\n\\n    return recovered;\\n  }\\n\\n  /** Governance */\\n\\n  function pause() public whenNotPaused onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public whenPaused onlyOwner {\\n    _unpause();\\n  }\\n\\n  /** Overrides */\\n\\n  /**\\n    * @dev Hook that is called before any token transfer. This includes minting\\n    * and burning.\\n    *\\n    * Calling conditions:\\n    *\\n    * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n    * transferred to `to`.\\n    * - When `from` is zero, `tokenId` will be minted for `to`.\\n    * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n    * - `from` and `to` are never both zero.\\n    *\\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n    */\\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n    internal\\n    override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\n  {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n    if (from != address(0) && to != address(0)) {\\n      bytes32 spaceId = _stays[tokenId].spaceId;\\n      uint256 deposit = _deposits[spaceId][from][tokenId];\\n\\n      // move the deposit\\n      _deposits[spaceId][from][tokenId] = 0;\\n      _deposits[spaceId][to][tokenId] = deposit;\\n    }\\n  }\\n\\n  function _burn(uint256 tokenId) internal override(ERC721Upgradeable, ERC721URIStorageUpgradeable) {\\n    super._burn(tokenId);\\n  }\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\n    returns (string memory)\\n  {\\n    return super.tokenURI(tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0x1efb1a791b75cec39594890c26cf5c7b9cd96a1b0d7e2f351252ed43f28a0cdf\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/StayTokenMeta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nlibrary StayTokenMeta {\\n\\n  function createTokenUri(\\n    uint256 tokenId,\\n    bytes32 facilityId,\\n    bytes32 spaceId,\\n    uint256 startDay,\\n    uint256 numberOfDays,\\n    uint256 quantity,\\n    string memory tokenImageURI,\\n    string memory serviceURI\\n  ) internal pure returns (string memory) {\\n    // Creation of data URI is split up into several functions because of\\n    // variables stack number restriction in Solidity\\n    return createDataUri(\\n      string(\\n        abi.encodePacked(\\n          '{',\\n          createMandatoryProps(tokenId, tokenImageURI, serviceURI),\\n          ',',\\n          createAttributesProps(facilityId, spaceId, startDay, numberOfDays, quantity),\\n          '}'\\n        )\\n      )\\n    );\\n  }\\n\\n  function createMandatoryProps(\\n    uint256 tokenId,\\n    string memory tokenImageURI,\\n    string memory serviceURI\\n  ) internal pure returns (string memory) {\\n    return string(\\n      abi.encodePacked(\\n        '\\\"name\\\":\\\"Stay Amsterdam #',\\n        uintToString(tokenId),\\n        '\\\",\\\"description\\\":\\\"Stay at lodging facility\\\",\\\"image\\\":\\\"',\\n        tokenImageURI,\\n        '\\\",\\\"external_url\\\":\\\"',\\n        serviceURI,\\n        'tokens?tokenId=',\\n        uintToString(tokenId),\\n        '\\\"'\\n      )\\n    );\\n  }\\n\\n  function createAttributesProps(\\n    bytes32 facilityId,\\n    bytes32 spaceId,\\n    uint256 startDay,\\n    uint256 numberOfDays,\\n    uint256 quantity\\n  ) internal pure returns (string memory) {\\n    return string(\\n      abi.encodePacked(\\n        '\\\"attributes\\\":[{\\\"trait_type\\\":\\\"facilityId\\\",\\\"value\\\":\\\"',\\n        toHex(facilityId),\\n        '\\\"},{\\\"trait_type\\\":\\\"spaceId\\\",\\\"value\\\":\\\"',\\n        toHex(spaceId),\\n        '\\\"},{\\\"trait_type\\\":\\\"startDay\\\",\\\"value\\\":\\\"',\\n        uintToString(startDay),\\n        '\\\"},{\\\"trait_type\\\":\\\"numberOfDays\\\",\\\"value\\\":\\\"',\\n        uintToString(numberOfDays),\\n        '\\\"},{\\\"trait_type\\\":\\\"quantity\\\",\\\"value\\\":\\\"',\\n        uintToString(quantity),\\n        '\\\"}]'\\n      )\\n    );\\n  }\\n\\n  function createDataUri(string memory json) internal pure returns (string memory) {\\n    return string(\\n      abi.encodePacked(\\n        'data:application/json;base64,',\\n        Base64.encode(bytes(json))\\n      )\\n    );\\n  }\\n\\n  function uintToString(uint256 value) internal pure returns (string memory) {\\n    // Inspired by OraclizeAPI's implementation - MIT license\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function toHex16 (bytes16 data) internal pure returns (bytes32 result) {\\n    result = bytes32 (data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 |\\n      (bytes32 (data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64;\\n    result = result & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000 |\\n      (result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32;\\n    result = result & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000 |\\n      (result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16;\\n    result = result & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000 |\\n      (result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8;\\n    result = (result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4 |\\n      (result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8;\\n    result = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +\\n      uint256 (result) +\\n      (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\\n      0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 7);\\n  }\\n\\n  function toHex(bytes32 data) internal pure returns (string memory) {\\n    return string(\\n      abi.encodePacked(\\n        \\\"0x\\\",\\n        toHex16(bytes16(data)), toHex16(bytes16 (data << 128))\\n      )\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x4760cb9aceb8b8da3251ff8b9c002904bbe534f9d1a3f00b3444740d027dba0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b506200010b565b6000620000f630620000fc60201b62002e301760201c565b15905090565b6001600160a01b03163b151590565b616349806200011b6000396000f3fe6080604052600436106103335760003560e01c80636a22dd26116101ab578063b38759fd116100f7578063e985e9c511610095578063f2fde38b1161006f578063f2fde38b14610a17578063f7cdbc9d14610a37578063ffae741514610a57578063ffc1e09a14610a8857600080fd5b8063e985e9c514610989578063e994529e146109d2578063eb2243f814610a0457600080fd5b8063c87b56dd116100d1578063c87b56dd146108ee578063cad302e41461090e578063e1e33b9c14610949578063e6ccb4ce1461096957600080fd5b8063b38759fd14610899578063b88d4fde146108ae578063bfef4d40146108ce57600080fd5b80638f201f5f116101645780639bc190db1161013e5780639bc190db1461080c5780639ff682141461082c578063a22cb46514610859578063a46880321461087957600080fd5b80638f201f5f146107b75780639518f5fa146107d757806395d89b41146107f757600080fd5b80636a22dd261461071957806370a0823114610739578063715018a6146107595780638129fc1c1461076e5780638456cb59146107835780638da5cb5b1461079857600080fd5b806327d7cedb116102855780634ce0a872116102235780635d45d919116101fd5780635d45d919146106995780635ee7aa13146106b95780636352211e146106d9578063673f0dd5146106f957600080fd5b80634ce0a872146106405780634f6ccce7146106605780635c975abb1461068057600080fd5b80633f4ba83a1161025f5780633f4ba83a146105bb57806342842e0e146105d0578063438c9cab146105f05780634c18a8ec1461061057600080fd5b806327d7cedb146105495780632f745c5914610569578063342df9b21461058957600080fd5b8063095ea7b3116102f25780631bd2eeee116102cc5780631bd2eeee146104d65780631bf7509b146104f657806320bf6ddb1461051657806323b872dd1461052957600080fd5b8063095ea7b31461044d57806318160ddd1461046d5780631b9bdb121461048c57600080fd5b806244253614610338578062d34b541461035a57806301ffc9a714610385578063038c8975146103b557806306fdde03146103f3578063081812fc14610415575b600080fd5b34801561034457600080fd5b50610358610353366004615521565b610aa8565b005b34801561036657600080fd5b5061036f610b4c565b60405161037c9190615d60565b60405180910390f35b34801561039157600080fd5b506103a56103a036600461570a565b610c23565b604051901515815260200161037c565b3480156103c157600080fd5b506103e66103d0366004615521565b6000908152610130602052604090205460ff1690565b60405161037c9190615ebe565b3480156103ff57600080fd5b50610408610c34565b60405161037c9190615ee6565b34801561042157600080fd5b50610435610430366004615521565b610cc6565b6040516001600160a01b03909116815260200161037c565b34801561045957600080fd5b506103586104683660046154f7565b610d4e565b34801561047957600080fd5b506099545b60405190815260200161037c565b34801561049857600080fd5b5061047e6104a73660046154c4565b600091825261012f602090815260408084206001600160a01b0395909516845293815283832091835252205490565b3480156104e257600080fd5b506103586104f1366004615521565b610e64565b34801561050257600080fd5b5061036f6105113660046153a9565b611027565b61047e6105243660046156d8565b61104c565b34801561053557600080fd5b506103586105443660046153f7565b611353565b34801561055557600080fd5b5061036f6105643660046155dc565b611384565b34801561057557600080fd5b5061047e6105843660046154f7565b611541565b34801561059557600080fd5b506105a96105a4366004615521565b6115d7565b60405161037c96959493929190615dcc565b3480156105c757600080fd5b506103586116a7565b3480156105dc57600080fd5b506103586105eb3660046153f7565b611726565b3480156105fc57600080fd5b5061035861060b366004615591565b611741565b34801561061c57600080fd5b5061063061062b366004615521565b611813565b60405161037c9493929190615d98565b34801561064c57600080fd5b5061035861065b366004615678565b6118e0565b34801561066c57600080fd5b5061047e61067b366004615521565b6119a4565b34801561068c57600080fd5b506101315460ff166103a5565b3480156106a557600080fd5b506103586106b4366004615521565b611a37565b3480156106c557600080fd5b506103586106d4366004615608565b611adc565b3480156106e557600080fd5b506104356106f4366004615521565b611d47565b34801561070557600080fd5b506105a9610714366004615521565b611dbe565b34801561072557600080fd5b50610358610734366004615521565b611df6565b34801561074557600080fd5b5061047e6107543660046153a9565b611e84565b34801561076557600080fd5b50610358611f0b565b34801561077a57600080fd5b50610358611f40565b34801561078f57600080fd5b506103586120b1565b3480156107a457600080fd5b50610163546001600160a01b0316610435565b3480156107c357600080fd5b506103586107d236600461553a565b612108565b3480156107e357600080fd5b5061036f6107f2366004615521565b612206565b34801561080357600080fd5b50610408612269565b34801561081857600080fd5b50610358610827366004615521565b612278565b34801561083857600080fd5b506108446362155d6e81565b60405163ffffffff909116815260200161037c565b34801561086557600080fd5b5061035861087436600461549a565b612319565b34801561088557600080fd5b50610358610894366004615521565b612328565b3480156108a557600080fd5b5061036f6123c8565b3480156108ba57600080fd5b506103586108c9366004615433565b6123da565b3480156108da57600080fd5b5061036f6108e936600461555d565b612412565b3480156108fa57600080fd5b50610408610909366004615521565b6125a6565b34801561091a57600080fd5b506104086040518060400160405280600f81526020016e68747470733a2f2f77696e2e736f2f60881b81525081565b34801561095557600080fd5b50610358610964366004615744565b6125b1565b34801561097557600080fd5b506103586109843660046157fb565b6125e2565b34801561099557600080fd5b506103a56109a43660046153c4565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156109de57600080fd5b506109f26109ed366004615521565b61281b565b60405161037c96959493929190615e58565b610358610a123660046154c4565b6128e4565b348015610a2357600080fd5b50610358610a323660046153a9565b6128ef565b348015610a4357600080fd5b50610358610a52366004615797565b612988565b348015610a6357600080fd5b50610a77610a72366004615521565b612c02565b60405161037c959493929190615d19565b348015610a9457600080fd5b5061036f610aa3366004615521565b612cd6565b6000818152610199602052604090205481906001600160a01b0316336001600160a01b031614610af35760405162461bcd60e51b8152600401610aea90615f4b565b60405180910390fd5b600082815261019960209081526040808320805460ff60a01b191690558051858152918201929092527f5c33859dfe8722791b5d72ad942a0895181f8a694288ec429394f620de15032091015b60405180910390a15050565b6060610b56612e3f565b6001600160401b03811115610b6d57610b6d616229565b604051908082528060200260200182016040528015610b96578160200160208202803683370190505b5090506000805b610ba8610196612eaa565b811015610c1e576000610bbd61019683612eb4565b60008181526101996020526040902054909150600160a01b900460ff1615610c0b5780848481518110610bf257610bf2616213565b602090810291909101015282610c078161618c565b9350505b5080610c168161618c565b915050610b9d565b505090565b6000610c2e82612ec7565b92915050565b606060658054610c4390616151565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6f90616151565b8015610cbc5780601f10610c9157610100808354040283529160200191610cbc565b820191906000526020600020905b815481529060010190602001808311610c9f57829003601f168201915b5050505050905090565b6000610cd182612eec565b610d325760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610aea565b506000908152606960205260409020546001600160a01b031690565b6000610d5982611d47565b9050806001600160a01b0316836001600160a01b03161415610dc75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610aea565b336001600160a01b0382161480610de35750610de381336109a4565b610e555760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610aea565b610e5f8383612f09565b505050565b600081815261019d602052604090208054610eb25760405162461bcd60e51b815260206004820152600e60248201526d14dd185e481b9bdd08199bdd5b9960921b6044820152606401610aea565b6004810154610100900460ff1615610f025760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e4818da1958dad959081bdd5d606a1b6044820152606401610aea565b8054600081815261019b602090815260408083205483526101999091529020546001600160a01b0316338114610f4a5760405162461bcd60e51b8152600401610aea90615fbb565b82600201548360010154610f5e91906160c3565b610f6b90620151806160ef565b610f79906362155d6e6160c3565b421015610fc85760405162461bcd60e51b815260206004820152601e60248201527f466f7262696464656e20756e6c65737320636865636b6f7574206461746500006044820152606401610aea565b60048301805461ff001916610100179055610fed610fe585611d47565b828487612f77565b6040518481527f2c276699fefbad45f18509233bc03bb9cfdf41b18f32756933188bdef35fef55906020015b60405180910390a150505050565b6001600160a01b038116600090815261019860205260409020606090610c2e90612f83565b600061105b6101315460ff1690565b156110785760405162461bcd60e51b8152600401610aea90615f91565b611083858585612f8e565b600085815261019b6020526040812060028101549091906110a485876160ef565b6110ae91906160ef565b9050803410156110f55760405162461bcd60e51b81526020600482015260126024820152714e6565642e204d6f72652e204d6f6e65792160701b6044820152606401610aea565b60005b858110156111d057600088815261019c60205260408120869161111b848b6160c3565b8152602001908152602001600020548460010154611139919061610e565b10156111805760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420696e76656e746f727960501b6044820152606401610aea565b600088815261019c60205260408120869161119b848b6160c3565b815260200190815260200160002060008282546111b891906160c3565b909155508190506111c88161618c565b9150506110f8565b506111e061019580546001019055565b60006111ec6101955490565b90506111f83382613121565b600061124d8285600001548b8b8b8b6040518060800160405280605c8152602001616278605c91396040518060400160405280600f81526020016e68747470733a2f2f77696e2e736f2f60881b81525061313b565b9050611259828261318a565b6040805160c0810182528a815260208082018b81528284018b8152606084018b815260006080860181815260a087018281528a835261019d87528883209751885594516001888101919091559351600288015591516003870155905160049095018054935115156101000261ff00199615159690961661ffff1990941693909317949094179091558c835261019e825292822080549384018155825290200182905561130c6113053390565b8a846128e4565b604080518a8152602081018490527fe04083eb622e3cb7d063f319076c83270c24acb409a3bc13abcfb36af60f8617910160405180910390a150925050505b949350505050565b61135d3382613215565b6113795760405162461bcd60e51b8152600401610aea90616027565b610e5f8383836132fb565b6060611391848484612f8e565b600084815261019b60209081526040808320815160c08101835281548152600182015493810193909352600281015491830191909152600381015460ff80821615156060850152610100909104161515608083015260048101805460a0840191906113fb90616151565b80601f016020809104026020016040519081016040528092919081815260200182805461142790616151565b80156114745780601f1061144957610100808354040283529160200191611474565b820191906000526020600020905b81548152906001019060200180831161145757829003601f168201915b50505050508152505090506000836001600160401b0381111561149957611499616229565b6040519080825280602002602001820160405280156114c2578160200160208202803683370190505b50905060005b8481101561153757600087815261019c60205260408120906114ea83896160c3565b8152602001908152602001600020548360200151611508919061610e565b82828151811061151a5761151a616213565b60209081029190910101528061152f8161618c565b9150506114c8565b5095945050505050565b600061154c83611e84565b82106115ae5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610aea565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b600081815261019b60205260409020600381015481546001830154600284015460048501805460ff61010087048116979596949593941692606092909161161d90616151565b80601f016020809104026020016040519081016040528092919081815260200182805461164990616151565b80156116965780601f1061166b57610100808354040283529160200191611696565b820191906000526020600020905b81548152906001019060200180831161167957829003601f168201915b505050505091505091939550919395565b6101315460ff166116f15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aea565b610163546001600160a01b0316331461171c5760405162461bcd60e51b8152600401610aea90615ff2565b6117246134a2565b565b610e5f838383604051806020016040528060008152506123da565b6000838152610199602052604090205483906001600160a01b0316336001600160a01b0316146117835760405162461bcd60e51b8152600401610aea90615f4b565b6117c283838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061353792505050565b6000848152610199602052604090206117df9060010184846151a7565b507fb252d91e8d424ba6f9f1647d21d7b0bbd8e2a3cbb318aaecb0d735fba9f62c7f84848460405161101993929190615e35565b600081815261019960205260409020805460018201805460ff600160a81b84048116946001600160a01b03851694600160a01b90049091169260609261185890616151565b80601f016020809104026020016040519081016040528092919081815260200182805461188490616151565b80156118d15780601f106118a6576101008083540402835291602001916118d1565b820191906000526020600020905b8154815290600101906020018083116118b457829003601f168201915b50505050509150509193509193565b600085815261019b6020908152604080832054835261019990915290205485906001600160a01b0316336001600160a01b0316146119305760405162461bcd60e51b8152600401610aea90615fbb565b600086815261019b60205260409020600181018690556002810185905561195b6004820185856151a7565b507f0cdd46b7a456c1e6514d3c451f487eb2ea5039ac3f54fc210e98ce69ecdb00758787878787604051611993959493929190615e8d565b60405180910390a150505050505050565b60006119af60995490565b8210611a125760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610aea565b60998281548110611a2557611a25616213565b90600052602060002001549050919050565b600081815261019b6020908152604080832054835261019990915290205481906001600160a01b0316336001600160a01b031614611a875760405162461bcd60e51b8152600401610aea90615fbb565b600082815261019b6020908152604091829020600301805460ff191660019081179091558251858152918201527ff95c289b48e2e0dc7c8f639934e871675404b92cf01f600493194c43e7949e859101610b40565b6101315460ff1615611b005760405162461bcd60e51b8152600401610aea90615f91565b85611b0a81613588565b611b2c81604051806060016040528060228152602001616256602291396135ee565b611b6b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061353792505050565b6000818484604051602001611b8293929190615952565b60408051808303601f190181529181528151602092830120600081815261019b909352912060030154909150610100900460ff1615611bfa5760405162461bcd60e51b8152602060048201526014602482015273537061636520616c72656164792065786973747360601b6044820152606401610aea565b6040518060c00160405280838152602001888152602001878152602001861515815260200160011515815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815261019b6020908152604091829020845181558482015160018201559184015160028301556060840151600383018054608087015115156101000261ff00199315159390931661ffff199091161791909117905560a08401518051929350611cd39260048501929190910190615227565b505050600082815261019a6020908152604080832080546001810182559084529190922001829055517f335958c15e70938d2bfae6c90457d7732a3e398f2423c491dc6503b67334745a90611d3590839085908b908b908b908b908b90615e01565b60405180910390a15050505050505050565b6000818152606760205260408120546001600160a01b031680610c2e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610aea565b600081815261019d60205260408120548190819081908190606090611de2906115d7565b949c939b5091995097509550909350915050565b6000818152610199602052604090205481906001600160a01b0316336001600160a01b031614611e385760405162461bcd60e51b8152600401610aea90615f4b565b6000828152610199602052604090819020805460ff60a81b19169055517f9cb52f05776b0f321eb9ca8c9e1b26b978036072417bf384bd406189f43864f890610b409084815260200190565b60006001600160a01b038216611eef5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610aea565b506001600160a01b031660009081526068602052604090205490565b610163546001600160a01b03163314611f365760405162461bcd60e51b8152600401610aea90615ff2565b6117246000613628565b600054610100900460ff16611f5b5760005460ff1615611f5f565b303b155b611fc25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610aea565b600054610100900460ff16158015611fe4576000805461ffff19166101011790555b6120336040518060400160405280600e81526020016d5374617920416d7374657264616d60901b8152506040518060400160405280600781526020016653544159414d5360c81b81525061367b565b61207c6040518060400160405280600e81526020016d5374617920416d7374657264616d60901b815250604051806040016040528060018152602001603160f81b8152506136ac565b6120846136dd565b61208c6136dd565b612094613704565b61209c613733565b80156120ae576000805461ff00191690555b50565b6101315460ff16156120d55760405162461bcd60e51b8152600401610aea90615f91565b610163546001600160a01b031633146121005760405162461bcd60e51b8152600401610aea90615ff2565b611724613762565b6000828152610199602052604090205482906001600160a01b0316336001600160a01b03161461214a5760405162461bcd60e51b8152600401610aea90615f4b565b6001600160a01b03821660009081526101986020526040902061216d90846137bc565b50600083815261019960209081526040808320546001600160a01b03168352610198909152902061219e90846137c8565b506000838152610199602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915185815282917f11a520c5c4bfade8b450399ea67096dba36478d23d9a45f02e32989cfe307dde91015b60405180910390a3505050565b600081815261019a602090815260409182902080548351818402810184019094528084526060939283018282801561225d57602002820191906000526020600020905b815481526020019060010190808311612249575b50505050509050919050565b606060668054610c4390616151565b600081815261019b6020908152604080832054835261019990915290205481906001600160a01b0316336001600160a01b0316146122c85760405162461bcd60e51b8152600401610aea90615fbb565b600082815261019b60209081526040808320600301805460ff191690558051858152918201929092527ff95c289b48e2e0dc7c8f639934e871675404b92cf01f600493194c43e7949e859101610b40565b6123243383836137d4565b5050565b6000818152610199602052604090205481906001600160a01b0316336001600160a01b03161461236a5760405162461bcd60e51b8152600401610aea90615f4b565b6000828152610199602052604090819020805460ff60a01b1916600160a01b179055517f5c33859dfe8722791b5d72ad942a0895181f8a694288ec429394f620de15032090610b409084906001909182521515602082015260400190565b60606123d5610196612f83565b905090565b6123e43383613215565b6124005760405162461bcd60e51b8152600401610aea90616027565b61240c8484848461389b565b50505050565b600082815261019e60205260408120606091805b82548110156124ae57846002811115612441576124416161e7565b61247784838154811061245657612456616213565b90600052602060002001546000908152610130602052604090205460ff1690565b6002811115612488576124886161e7565b141561249c57816124988161618c565b9250505b806124a68161618c565b915050612426565b506000816001600160401b038111156124c9576124c9616229565b6040519080825280602002602001820160405280156124f2578160200160208202803683370190505b5090506000805b845481101561259a57866002811115612514576125146161e7565b61252986838154811061245657612456616213565b600281111561253a5761253a6161e7565b14156125885784818154811061255257612552616213565b906000526020600020015483838151811061256f5761256f616213565b6020908102919091010152816125848161618c565b9250505b806125928161618c565b9150506124f9565b50909695505050505050565b6060610c2e826138ce565b6101315460ff16156125d55760405162461bcd60e51b8152600401610aea90615f91565b610e5f8383836000612988565b60006125ed82613a3d565b600084815261019d60205260409020805491925090806126405760405162461bcd60e51b815260206004820152600e60248201526d14dd185e481b9bdd08199bdd5b9960921b6044820152606401610aea565b600482015460ff161561268a5760405162461bcd60e51b815260206004820152601260248201527120b63932b0b23c9031b432b1b5b2b21034b760711b6044820152606401610aea565b600081815261019b60209081526040808320805484526101999092529091206126b287611d47565b6001600160a01b0316856001600160a01b031614806126dd575080546001600160a01b038681169116145b6127295760405162461bcd60e51b815260206004820152601d60248201527f566f7563686572207369676e6572206973206e6f7420616c6c6f7765640000006044820152606401610aea565b60208601516001600160a01b0316336001600160a01b03161461277d5760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339031b0b63632b960a11b6044820152606401610aea565b60028401548454600090815261012f602090815260408083206001600160a01b038a16845282528083208b845290915281205490916127bb916160db565b60048601805460ff1916600117905590506127eb6127d889611d47565b83546001600160a01b031683878c613b4b565b6040518881527fdf06c27528e294967ba5e32e69b9c5fe102a58c699c44740c2c4c6afc719253590602001611d35565b61019b602052600090815260409020805460018201546002830154600384015460048501805494959394929360ff80841694610100909404169290919061286190616151565b80601f016020809104026020016040519081016040528092919081815260200182805461288d90616151565b80156128da5780601f106128af576101008083540402835291602001916128da565b820191906000526020600020905b8154815290600101906020018083116128bd57829003601f168201915b5050505050905086565b610e5f838383613bd3565b610163546001600160a01b0316331461291a5760405162461bcd60e51b8152600401610aea90615ff2565b6001600160a01b03811661297f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aea565b6120ae81613628565b6101315460ff16156129ac5760405162461bcd60e51b8152600401610aea90615f91565b6129eb84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061353792505050565b6000338585604051602001612a0293929190615926565b60408051808303601f1901815291815281516020928301206000818152610199909352912054909150600160a81b900460ff1615612a825760405162461bcd60e51b815260206004820152601760248201527f466163696c69747920616c7265616479206578697374730000000000000000006044820152606401610aea565b6040518060a00160405280612a943390565b6001600160a01b03168152602001841515815260200160011515815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0380861660209384015284825261019983526040918290208451815486860151948701511515600160a81b0260ff60a81b19951515600160a01b026001600160a81b031990921692909416919091171792909216178155606083015180519192612b6492600185019290910190615227565b5060809190910151600290910180546001600160a01b0319166001600160a01b03909216919091179055612b9a610196826137bc565b5033600090815261019860205260409020612bb590826137bc565b50336001600160a01b03167f28c9a25063d40c8cf423202182ed575cc97982c1fd1771bd9721e19a38cc491d828787604051612bf393929190615e35565b60405180910390a25050505050565b61019960205260009081526040902080546001820180546001600160a01b0383169360ff600160a01b8504811694600160a81b900416929091612c4490616151565b80601f0160208091040260200160405190810160405280929190818152602001828054612c7090616151565b8015612cbd5780601f10612c9257610100808354040283529160200191612cbd565b820191906000526020600020905b815481529060010190602001808311612ca057829003601f168201915b505050600290930154919250506001600160a01b031685565b6060612ce182613c7f565b6001600160401b03811115612cf857612cf8616229565b604051908082528060200260200182016040528015612d21578160200160208202803683370190505b50600083815261019a6020908152604080832080548251818502810185019093528083529495509293909291830182828015612d7c57602002820191906000526020600020905b815481526020019060010190808311612d68575b50505050509050600080600090505b8251811015612e285761019b6000848381518110612dab57612dab616213565b60209081029190910181015182528101919091526040016000206003015460ff1615612e1657828181518110612de357612de3616213565b6020026020010151848381518110612dfd57612dfd616213565b602090810291909101015281612e128161618c565b9250505b80612e208161618c565b915050612d8b565b505050919050565b6001600160a01b03163b151590565b6000805b612e4e610196612eaa565b811015612ea6576101996000612e6661019684612eb4565b8152602081019190915260400160002054600160a01b900460ff1615612e945781612e908161618c565b9250505b80612e9e8161618c565b915050612e43565b5090565b6000610c2e825490565b6000612ec08383613cfe565b9392505050565b60006001600160e01b0319821663780e9d6360e01b1480610c2e5750610c2e82613d28565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612f3e82611d47565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61240c84848484613d78565b6060610c2e82613e2f565b612f9b6202a3004261610e565b612fa883620151806160ef565b612fb6906362155d6e6160c3565b11612ffc5760405162461bcd60e51b8152602060048201526016602482015275111bdb89dd081cdd185e481a5b881d1a19481c185cdd60521b6044820152606401610aea565b600083815261019b60209081526040808320548352610199909152902054600160a01b900460ff166130705760405162461bcd60e51b815260206004820152601c60248201527f4c6f6467696e6720466163696c69747920697320696e616374697665000000006044820152606401610aea565b600083815261019b602052604090206003015460ff166130c65760405162461bcd60e51b8152602060048201526011602482015270537061636520697320696e61637469766560781b6044820152606401610aea565b60008111610e5f5760405162461bcd60e51b815260206004820152602260248201527f4e756d626572206f6620646179732073686f756c642062652031206f72206d6f604482015261726560f01b6064820152608401610aea565b612324828260405180602001604052806000815250613e89565b606061317d61314b8a8585613ebc565b6131588a8a8a8a8a613efd565b604051602001613169929190615c40565b604051602081830303815290604052613f5a565b9998505050505050505050565b61319382612eec565b6131f65760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610aea565b600082815260c9602090815260409091208251610e5f92840190615227565b600061322082612eec565b6132815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610aea565b600061328c83611d47565b9050806001600160a01b0316846001600160a01b031614806132c75750836001600160a01b03166132bc84610cc6565b6001600160a01b0316145b8061134b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff1661134b565b826001600160a01b031661330e82611d47565b6001600160a01b0316146133725760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610aea565b6001600160a01b0382166133d45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610aea565b6133df838383613f8b565b6133ea600082612f09565b6001600160a01b038316600090815260686020526040812080546001929061341390849061610e565b90915550506001600160a01b03821660009081526068602052604081208054600192906134419084906160c3565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6101315460ff166134ec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aea565b610131805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008151116120ae5760405162461bcd60e51b815260206004820152601960248201527f4461746120555249206d7573742062652070726f7669646564000000000000006044820152606401610aea565b60008181526101996020526040902054600160a81b900460ff166120ae5760405162461bcd60e51b815260206004820152601760248201527f466163696c69747920646f6573206e6f742065786973740000000000000000006044820152606401610aea565b6000828152610199602052604090205481906001600160a01b03163314610e5f5760405162461bcd60e51b8152600401610aea9190615ee6565b61016380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166136a25760405162461bcd60e51b8152600401610aea90616078565b6123248282614013565b600054610100900460ff166136d35760405162461bcd60e51b8152600401610aea90616078565b6123248282614061565b600054610100900460ff166117245760405162461bcd60e51b8152600401610aea90616078565b600054610100900460ff1661372b5760405162461bcd60e51b8152600401610aea90616078565b6117246140a2565b600054610100900460ff1661375a5760405162461bcd60e51b8152600401610aea90616078565b6117246140d6565b6101315460ff16156137865760405162461bcd60e51b8152600401610aea90615f91565b610131805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861351a3390565b6000612ec08383614106565b6000612ec08383614155565b816001600160a01b0316836001600160a01b031614156138365760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610aea565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016121f9565b6138a68484846132fb565b6138b284848484614248565b61240c5760405162461bcd60e51b8152600401610aea90615ef9565b60606138d982612eec565b61393f5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610aea565b600082815260c960205260408120805461395890616151565b80601f016020809104026020016040519081016040528092919081815260200182805461398490616151565b80156139d15780601f106139a6576101008083540402835291602001916139d1565b820191906000526020600020905b8154815290600101906020018083116139b457829003601f168201915b5050505050905060006139ef60408051602081019091526000815290565b9050805160001415613a02575092915050565b815115613a34578082604051602001613a1c92919061596c565b60405160208183030381529060405292505050919050565b61134b84614352565b600080613ac17fe14fce867d3bcfe3e7c779de069d9e179b67b9288baf649805c61c495483896b846000015185602001518660400151604051602001613aa694939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405160208183030381529060405280519060200120614429565b9050600080613ad4838660600151614477565b90925090506000816004811115613aed57613aed6161e7565b148015613b06575084516001600160a01b038381169116145b613b435760405162461bcd60e51b815260206004820152600e60248201526d213937b5b2b7103b37bab1b432b960911b6044820152606401610aea565b509392505050565b600082815261019b6020526040902060020154831115613bbf5760405162461bcd60e51b815260206004820152602960248201527f576974686472617720616d6f756e74206e6f7420616c6c6f77656420696e207460448201526868697320737461746560b81b6064820152608401610aea565b613bcc85858585856144e7565b5050505050565b600082815261012f602090815260408083206001600160a01b03871684528252808320848452909152812080543492839291613c109084906160c3565b909155505060008281526101306020908152604091829020805460ff1916905581518381529081018590529081018390526001600160a01b038516907f4eef3d1efb11f00508d9b7bb632ddcfa6da9d7105bd39f404bdd7362e6c59dbc9060600160405180910390a250505050565b600081815261019a60205260408120815b8154811015613cf75761019b6000838381548110613cb057613cb0616213565b6000918252602080832090910154835282019290925260400190206003015460ff1615613ce55782613ce18161618c565b9350505b80613cef8161618c565b915050613c90565b5050919050565b6000826000018281548110613d1557613d15616213565b9060005260206000200154905092915050565b60006001600160e01b031982166380ac58cd60e01b1480613d5957506001600160e01b03198216635b5e139f60e01b145b80610c2e57506301ffc9a760e01b6001600160e01b0319831614610c2e565b600082815261012f602090815260408083206001600160a01b038816845282528083208484528252808320805490849055610130909252909120805460ff191660021790558015613bcc57613dd66001600160a01b0385168261462c565b60408051828152602081018590529081018390526001600160a01b0380861691908716907f89eeb38ad2da123e4b3662ad415c1856733f76deaccee072a5234ab427ffdb70906060015b60405180910390a35050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561225d57602002820191906000526020600020908154815260200190600101908083116122495750505050509050919050565b613e938383614745565b613ea06000848484614248565b610e5f5760405162461bcd60e51b8152600401610aea90615ef9565b6060613ec784614884565b8383613ed287614884565b604051602001613ee59493929190615b2f565b60405160208183030381529060405290509392505050565b6060613f0886614981565b613f1186614981565b613f1a86614884565b613f2386614884565b613f2c86614884565b604051602001613f4095949392919061599b565b604051602081830303815290604052905095945050505050565b6060613f65826149bc565b604051602001613f759190615c97565b6040516020818303038152906040529050919050565b613f96838383614b0f565b6001600160a01b03831615801590613fb657506001600160a01b03821615155b15610e5f57600081815261019d6020908152604080832054835261012f82528083206001600160a01b0380881685528184528285208686528452828520805490869055908716855290835281842085855290925290912055505050565b600054610100900460ff1661403a5760405162461bcd60e51b8152600401610aea90616078565b815161404d906065906020850190615227565b508051610e5f906066906020840190615227565b600054610100900460ff166140885760405162461bcd60e51b8152600401610aea90616078565b81516020928301208151919092012060fb9190915560fc55565b600054610100900460ff166140c95760405162461bcd60e51b8152600401610aea90616078565b610131805460ff19169055565b600054610100900460ff166140fd5760405162461bcd60e51b8152600401610aea90616078565b61172433613628565b600081815260018301602052604081205461414d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c2e565b506000610c2e565b6000818152600183016020526040812054801561423e57600061417960018361610e565b855490915060009061418d9060019061610e565b90508181146141f25760008660000182815481106141ad576141ad616213565b90600052602060002001549050808760000184815481106141d0576141d0616213565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614203576142036161fd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c2e565b6000915050610c2e565b60006001600160a01b0384163b1561434a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061428c903390899088908890600401615cdc565b602060405180830381600087803b1580156142a657600080fd5b505af19250505080156142d6575060408051601f3d908101601f191682019092526142d391810190615727565b60015b614330573d808015614304576040519150601f19603f3d011682016040523d82523d6000602084013e614309565b606091505b5080516143285760405162461bcd60e51b8152600401610aea90615ef9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061134b565b50600161134b565b606061435d82612eec565b6143c15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610aea565b60006143d860408051602081019091526000815290565b905060008151116143f85760405180602001604052806000815250612ec0565b8061440284614bc7565b60405160200161441392919061596c565b6040516020818303038152906040529392505050565b6000610c2e614436614cc4565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156144ae5760208301516040840151606085015160001a6144a287828585614d3f565b945094505050506144e0565b8251604014156144d857602083015160408401516144cd868383614e2c565b9350935050506144e0565b506000905060025b9250929050565b600082815261012f602090815260408083206001600160a01b038916845282528083208484529091529020548311156145575760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b6044820152606401610aea565b600082815261012f602090815260408083206001600160a01b0389168452825280832084845290915290205461458e90849061610e565b600083815261012f602090815260408083206001600160a01b038a811685529083528184208685528352818420949094556101309091529020805460ff191660011790556145de9085168461462c565b60408051848152602081018490529081018290526001600160a01b0380861691908716907f89eeb38ad2da123e4b3662ad415c1856733f76deaccee072a5234ab427ffdb7090606001613e20565b8047101561467c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610aea565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146146c9576040519150601f19603f3d011682016040523d82523d6000602084013e6146ce565b606091505b5050905080610e5f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610aea565b6001600160a01b03821661479b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610aea565b6147a481612eec565b156147f15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610aea565b6147fd60008383613f8b565b6001600160a01b03821660009081526068602052604081208054600192906148269084906160c3565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060816148a85750506040805180820190915260018152600360fc1b602082015290565b8160005b81156148d257806148bc8161618c565b91506148cb9050600a836160db565b91506148ac565b6000816001600160401b038111156148ec576148ec616229565b6040519080825280601f01601f191660200182016040528015614916576020820181803683370190505b5090505b841561134b5761492b60018361610e565b9150614938600a866161a7565b6149439060306160c3565b60f81b81838151811061495857614958616213565b60200101906001600160f81b031916908160001a90535061497a600a866160db565b945061491a565b606061498c82614e65565b614999608084901b614e65565b60405161060f60f31b602082015260228101929092526042820152606201613f75565b60608151600014156149dc57505060408051602081019091526000815290565b60006040518060600160405280604081526020016162d46040913990506000600384516002614a0b91906160c3565b614a1591906160db565b614a209060046160ef565b6001600160401b03811115614a3757614a37616229565b6040519080825280601f01601f191660200182016040528015614a61576020820181803683370190505b509050600182016020820185865187015b80821015614acd576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250614a72565b5050600386510660018114614ae95760028114614afc57614b04565b603d6001830353603d6002830353614b04565b603d60018303535b509195945050505050565b6001600160a01b038316614b6a57614b6581609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b614b8d565b816001600160a01b0316836001600160a01b031614614b8d57614b8d8382615017565b6001600160a01b038216614ba457610e5f816150b4565b826001600160a01b0316826001600160a01b031614610e5f57610e5f8282615163565b606081614beb5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614c155780614bff8161618c565b9150614c0e9050600a836160db565b9150614bef565b6000816001600160401b03811115614c2f57614c2f616229565b6040519080825280601f01601f191660200182016040528015614c59576020820181803683370190505b5090505b841561134b57614c6e60018361610e565b9150614c7b600a866161a7565b614c869060306160c3565b60f81b818381518110614c9b57614c9b616213565b60200101906001600160f81b031916908160001a905350614cbd600a866160db565b9450614c5d565b60006123d57f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f614cf360fb5490565b60fc546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614d765750600090506003614e23565b8460ff16601b14158015614d8e57508460ff16601c14155b15614d9f5750600090506004614e23565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614df3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614e1c57600060019250925050614e23565b9150600090505b94509492505050565b6000806001600160ff1b03831681614e4960ff86901c601b6160c3565b9050614e5787828885614d3f565b935093505050935093915050565b7aff00000000000000ff00000000000000ff00000000000000ff00006bffffffff0000000000000000604083901c90811663ffffffff60c01b84161760201c63ffffffff60601b919091166001600160e01b031984161717601081901c9182167eff00000000000000ff00000000000000ff00000000000000ff000000000000821617600890811c7bff00000000000000ff00000000000000ff00000000000000ff000000939093167fff00000000000000ff00000000000000ff00000000000000ff000000000000009290921691909117919091179081901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f167f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f00600492831c161790614fb3827f06060606060606060606060606060606060606060606060606060606060606066160c3565b901c7f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f166007614fe391906160ef565b61500d827f30303030303030303030303030303030303030303030303030303030303030306160c3565b610c2e91906160c3565b6000600161502484611e84565b61502e919061610e565b600083815260986020526040902054909150808214615081576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b6099546000906150c69060019061610e565b6000838152609a6020526040812054609980549394509092849081106150ee576150ee616213565b90600052602060002001549050806099838154811061510f5761510f616213565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480615147576151476161fd565b6001900381819060005260206000200160009055905550505050565b600061516e83611e84565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b8280546151b390616151565b90600052602060002090601f0160209004810192826151d5576000855561521b565b82601f106151ee5782800160ff1982351617855561521b565b8280016001018555821561521b579182015b8281111561521b578235825591602001919060010190615200565b50612ea692915061529b565b82805461523390616151565b90600052602060002090601f016020900481019282615255576000855561521b565b82601f1061526e57805160ff191683800117855561521b565b8280016001018555821561521b579182015b8281111561521b578251825591602001919060010190615280565b5b80821115612ea6576000815560010161529c565b80356001600160a01b03811681146152c757600080fd5b919050565b803580151581146152c757600080fd5b600082601f8301126152ed57600080fd5b81356001600160401b038082111561530757615307616229565b604051601f8301601f19908116603f0116810190828211818310171561532f5761532f616229565b8160405283815286602085880101111561534857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f84011261537a57600080fd5b5081356001600160401b0381111561539157600080fd5b6020830191508360208285010111156144e057600080fd5b6000602082840312156153bb57600080fd5b612ec0826152b0565b600080604083850312156153d757600080fd5b6153e0836152b0565b91506153ee602084016152b0565b90509250929050565b60008060006060848603121561540c57600080fd5b615415846152b0565b9250615423602085016152b0565b9150604084013590509250925092565b6000806000806080858703121561544957600080fd5b615452856152b0565b9350615460602086016152b0565b92506040850135915060608501356001600160401b0381111561548257600080fd5b61548e878288016152dc565b91505092959194509250565b600080604083850312156154ad57600080fd5b6154b6836152b0565b91506153ee602084016152cc565b6000806000606084860312156154d957600080fd5b6154e2846152b0565b95602085013595506040909401359392505050565b6000806040838503121561550a57600080fd5b615513836152b0565b946020939093013593505050565b60006020828403121561553357600080fd5b5035919050565b6000806040838503121561554d57600080fd5b823591506153ee602084016152b0565b6000806040838503121561557057600080fd5b8235915060208301356003811061558657600080fd5b809150509250929050565b6000806000604084860312156155a657600080fd5b8335925060208401356001600160401b038111156155c357600080fd5b6155cf86828701615368565b9497909650939450505050565b6000806000606084860312156155f157600080fd5b505081359360208301359350604090920135919050565b60008060008060008060a0878903121561562157600080fd5b86359550602087013594506040870135935061563f606088016152cc565b925060808701356001600160401b0381111561565a57600080fd5b61566689828a01615368565b979a9699509497509295939492505050565b60008060008060006080868803121561569057600080fd5b85359450602086013593506040860135925060608601356001600160401b038111156156bb57600080fd5b6156c788828901615368565b969995985093965092949392505050565b600080600080608085870312156156ee57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561571c57600080fd5b8135612ec08161623f565b60006020828403121561573957600080fd5b8151612ec08161623f565b60008060006040848603121561575957600080fd5b83356001600160401b0381111561576f57600080fd5b61577b86828701615368565b909450925061578e9050602085016152cc565b90509250925092565b600080600080606085870312156157ad57600080fd5b84356001600160401b038111156157c357600080fd5b6157cf87828801615368565b90955093506157e29050602086016152cc565b91506157f0604086016152b0565b905092959194509250565b6000806040838503121561580e57600080fd5b8235915060208301356001600160401b038082111561582c57600080fd5b908401906080828703121561584057600080fd5b60405160808101818110838211171561585b5761585b616229565b604052615867836152b0565b8152615875602084016152b0565b60208201526040830135604082015260608301358281111561589657600080fd5b6158a2888286016152dc565b6060830152508093505050509250929050565b600081518084526158cd816020860160208601616125565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815161591c818560208601616125565b9290920192915050565b6bffffffffffffffffffffffff198460601b168152818360148301376000910160140190815292915050565b838152818360208301376000910160200190815292915050565b6000835161597e818460208801616125565b835190830190615992818360208801616125565b01949350505050565b7f2261747472696275746573223a5b7b2274726169745f74797065223a2266616381527134b634ba3ca4b21116113b30b63ab2911d1160711b6020820152600086516159ee816032850160208b01616125565b7f227d2c7b2274726169745f74797065223a2273706163654964222c2276616c756032918401918201526332911d1160e11b60528201528651615a38816056840160208b01616125565b7f227d2c7b2274726169745f74797065223a227374617274446179222c2276616c60569290910191820152643ab2911d1160d91b60768201528551615a8481607b840160208a01616125565b7f227d2c7b2274726169745f74797065223a226e756d6265724f6644617973222c607b929091019182015268113b30b63ab2911d1160b91b609b820152615b23615b14615b0e615ad760a485018961590a565b7f227d2c7b2274726169745f74797065223a227175616e74697479222c2276616c8152643ab2911d1160d91b602082015260250190565b8661590a565b62227d5d60e81b815260030190565b98975050505050505050565b7f226e616d65223a225374617920416d7374657264616d20230000000000000000815260008551615b67816018850160208a01616125565b7f222c226465736372697074696f6e223a2253746179206174206c6f6467696e6760189184019182015273103330b1b4b634ba3c91161134b6b0b3b2911d1160611b60388201528551615bc181604c840160208a01616125565b7111161132bc3a32b93730b62fbab936111d1160711b604c92909101918201528451615bf481605e840160208901616125565b6e746f6b656e733f746f6b656e49643d60881b605e92909101918201528351615c2481606d840160208801616125565b601160f91b606d9290910191820152606e019695505050505050565b607b60f81b815260008351615c5c816001850160208801616125565b600b60fa1b6001918401918201528351615c7d816002840160208801616125565b607d60f81b60029290910191820152600301949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251615ccf81601d850160208701616125565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615d0f908301846158b5565b9695505050505050565b600060018060a01b0380881683528615156020840152851515604084015260a06060840152615d4b60a08401866158b5565b91508084166080840152509695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561259a57835183529284019291840191600101615d7c565b84151581526001600160a01b03841660208201528215156040820152608060608201819052600090615d0f908301846158b5565b8615158152856020820152846040820152836060820152821515608082015260c060a08201526000615b2360c08301846158b5565b878152866020820152856040820152846060820152831515608082015260c060a0820152600061317d60c0830184866158e1565b838152604060208201526000615e4f6040830184866158e1565b95945050505050565b8681528560208201528460408201528315156060820152821515608082015260c060a08201526000615b2360c08301846158b5565b858152846020820152836040820152608060608201526000615eb36080830184866158e1565b979650505050505050565b6020810160038310615ee057634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000612ec060208301846158b5565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f6e6c79206c6f6467696e6720666163696c697479206f776e657220697320616040820152651b1b1bddd95960d21b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601b908201527f4f6e6c79207370616365206f776e657220697320616c6c6f7765640000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156160d6576160d66161bb565b500190565b6000826160ea576160ea6161d1565b500490565b6000816000190483118215151615616109576161096161bb565b500290565b600082821015616120576161206161bb565b500390565b60005b83811015616140578181015183820152602001616128565b8381111561240c5750506000910152565b600181811c9082168061616557607f821691505b6020821081141561618657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156161a0576161a06161bb565b5060010190565b6000826161b6576161b66161d1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146120ae57600080fdfe4f6e6c7920666163696c697479206f776e6572206d6179206164642053706163657368747470733a2f2f62616679626569616b6a726862676d7635346c346e73647778786364666b7065716833336d343561736d7736726b7768756a727977327161376e342e697066732e647765622e6c696e6b2f746f6b656e2e706e674142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220b39458b0e9f4a0c58242f640c78bd94ae0a1a4c5f32b4a91b1f652ce80efc6d264736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106103335760003560e01c80636a22dd26116101ab578063b38759fd116100f7578063e985e9c511610095578063f2fde38b1161006f578063f2fde38b14610a17578063f7cdbc9d14610a37578063ffae741514610a57578063ffc1e09a14610a8857600080fd5b8063e985e9c514610989578063e994529e146109d2578063eb2243f814610a0457600080fd5b8063c87b56dd116100d1578063c87b56dd146108ee578063cad302e41461090e578063e1e33b9c14610949578063e6ccb4ce1461096957600080fd5b8063b38759fd14610899578063b88d4fde146108ae578063bfef4d40146108ce57600080fd5b80638f201f5f116101645780639bc190db1161013e5780639bc190db1461080c5780639ff682141461082c578063a22cb46514610859578063a46880321461087957600080fd5b80638f201f5f146107b75780639518f5fa146107d757806395d89b41146107f757600080fd5b80636a22dd261461071957806370a0823114610739578063715018a6146107595780638129fc1c1461076e5780638456cb59146107835780638da5cb5b1461079857600080fd5b806327d7cedb116102855780634ce0a872116102235780635d45d919116101fd5780635d45d919146106995780635ee7aa13146106b95780636352211e146106d9578063673f0dd5146106f957600080fd5b80634ce0a872146106405780634f6ccce7146106605780635c975abb1461068057600080fd5b80633f4ba83a1161025f5780633f4ba83a146105bb57806342842e0e146105d0578063438c9cab146105f05780634c18a8ec1461061057600080fd5b806327d7cedb146105495780632f745c5914610569578063342df9b21461058957600080fd5b8063095ea7b3116102f25780631bd2eeee116102cc5780631bd2eeee146104d65780631bf7509b146104f657806320bf6ddb1461051657806323b872dd1461052957600080fd5b8063095ea7b31461044d57806318160ddd1461046d5780631b9bdb121461048c57600080fd5b806244253614610338578062d34b541461035a57806301ffc9a714610385578063038c8975146103b557806306fdde03146103f3578063081812fc14610415575b600080fd5b34801561034457600080fd5b50610358610353366004615521565b610aa8565b005b34801561036657600080fd5b5061036f610b4c565b60405161037c9190615d60565b60405180910390f35b34801561039157600080fd5b506103a56103a036600461570a565b610c23565b604051901515815260200161037c565b3480156103c157600080fd5b506103e66103d0366004615521565b6000908152610130602052604090205460ff1690565b60405161037c9190615ebe565b3480156103ff57600080fd5b50610408610c34565b60405161037c9190615ee6565b34801561042157600080fd5b50610435610430366004615521565b610cc6565b6040516001600160a01b03909116815260200161037c565b34801561045957600080fd5b506103586104683660046154f7565b610d4e565b34801561047957600080fd5b506099545b60405190815260200161037c565b34801561049857600080fd5b5061047e6104a73660046154c4565b600091825261012f602090815260408084206001600160a01b0395909516845293815283832091835252205490565b3480156104e257600080fd5b506103586104f1366004615521565b610e64565b34801561050257600080fd5b5061036f6105113660046153a9565b611027565b61047e6105243660046156d8565b61104c565b34801561053557600080fd5b506103586105443660046153f7565b611353565b34801561055557600080fd5b5061036f6105643660046155dc565b611384565b34801561057557600080fd5b5061047e6105843660046154f7565b611541565b34801561059557600080fd5b506105a96105a4366004615521565b6115d7565b60405161037c96959493929190615dcc565b3480156105c757600080fd5b506103586116a7565b3480156105dc57600080fd5b506103586105eb3660046153f7565b611726565b3480156105fc57600080fd5b5061035861060b366004615591565b611741565b34801561061c57600080fd5b5061063061062b366004615521565b611813565b60405161037c9493929190615d98565b34801561064c57600080fd5b5061035861065b366004615678565b6118e0565b34801561066c57600080fd5b5061047e61067b366004615521565b6119a4565b34801561068c57600080fd5b506101315460ff166103a5565b3480156106a557600080fd5b506103586106b4366004615521565b611a37565b3480156106c557600080fd5b506103586106d4366004615608565b611adc565b3480156106e557600080fd5b506104356106f4366004615521565b611d47565b34801561070557600080fd5b506105a9610714366004615521565b611dbe565b34801561072557600080fd5b50610358610734366004615521565b611df6565b34801561074557600080fd5b5061047e6107543660046153a9565b611e84565b34801561076557600080fd5b50610358611f0b565b34801561077a57600080fd5b50610358611f40565b34801561078f57600080fd5b506103586120b1565b3480156107a457600080fd5b50610163546001600160a01b0316610435565b3480156107c357600080fd5b506103586107d236600461553a565b612108565b3480156107e357600080fd5b5061036f6107f2366004615521565b612206565b34801561080357600080fd5b50610408612269565b34801561081857600080fd5b50610358610827366004615521565b612278565b34801561083857600080fd5b506108446362155d6e81565b60405163ffffffff909116815260200161037c565b34801561086557600080fd5b5061035861087436600461549a565b612319565b34801561088557600080fd5b50610358610894366004615521565b612328565b3480156108a557600080fd5b5061036f6123c8565b3480156108ba57600080fd5b506103586108c9366004615433565b6123da565b3480156108da57600080fd5b5061036f6108e936600461555d565b612412565b3480156108fa57600080fd5b50610408610909366004615521565b6125a6565b34801561091a57600080fd5b506104086040518060400160405280600f81526020016e68747470733a2f2f77696e2e736f2f60881b81525081565b34801561095557600080fd5b50610358610964366004615744565b6125b1565b34801561097557600080fd5b506103586109843660046157fb565b6125e2565b34801561099557600080fd5b506103a56109a43660046153c4565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156109de57600080fd5b506109f26109ed366004615521565b61281b565b60405161037c96959493929190615e58565b610358610a123660046154c4565b6128e4565b348015610a2357600080fd5b50610358610a323660046153a9565b6128ef565b348015610a4357600080fd5b50610358610a52366004615797565b612988565b348015610a6357600080fd5b50610a77610a72366004615521565b612c02565b60405161037c959493929190615d19565b348015610a9457600080fd5b5061036f610aa3366004615521565b612cd6565b6000818152610199602052604090205481906001600160a01b0316336001600160a01b031614610af35760405162461bcd60e51b8152600401610aea90615f4b565b60405180910390fd5b600082815261019960209081526040808320805460ff60a01b191690558051858152918201929092527f5c33859dfe8722791b5d72ad942a0895181f8a694288ec429394f620de15032091015b60405180910390a15050565b6060610b56612e3f565b6001600160401b03811115610b6d57610b6d616229565b604051908082528060200260200182016040528015610b96578160200160208202803683370190505b5090506000805b610ba8610196612eaa565b811015610c1e576000610bbd61019683612eb4565b60008181526101996020526040902054909150600160a01b900460ff1615610c0b5780848481518110610bf257610bf2616213565b602090810291909101015282610c078161618c565b9350505b5080610c168161618c565b915050610b9d565b505090565b6000610c2e82612ec7565b92915050565b606060658054610c4390616151565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6f90616151565b8015610cbc5780601f10610c9157610100808354040283529160200191610cbc565b820191906000526020600020905b815481529060010190602001808311610c9f57829003601f168201915b5050505050905090565b6000610cd182612eec565b610d325760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610aea565b506000908152606960205260409020546001600160a01b031690565b6000610d5982611d47565b9050806001600160a01b0316836001600160a01b03161415610dc75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610aea565b336001600160a01b0382161480610de35750610de381336109a4565b610e555760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610aea565b610e5f8383612f09565b505050565b600081815261019d602052604090208054610eb25760405162461bcd60e51b815260206004820152600e60248201526d14dd185e481b9bdd08199bdd5b9960921b6044820152606401610aea565b6004810154610100900460ff1615610f025760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e4818da1958dad959081bdd5d606a1b6044820152606401610aea565b8054600081815261019b602090815260408083205483526101999091529020546001600160a01b0316338114610f4a5760405162461bcd60e51b8152600401610aea90615fbb565b82600201548360010154610f5e91906160c3565b610f6b90620151806160ef565b610f79906362155d6e6160c3565b421015610fc85760405162461bcd60e51b815260206004820152601e60248201527f466f7262696464656e20756e6c65737320636865636b6f7574206461746500006044820152606401610aea565b60048301805461ff001916610100179055610fed610fe585611d47565b828487612f77565b6040518481527f2c276699fefbad45f18509233bc03bb9cfdf41b18f32756933188bdef35fef55906020015b60405180910390a150505050565b6001600160a01b038116600090815261019860205260409020606090610c2e90612f83565b600061105b6101315460ff1690565b156110785760405162461bcd60e51b8152600401610aea90615f91565b611083858585612f8e565b600085815261019b6020526040812060028101549091906110a485876160ef565b6110ae91906160ef565b9050803410156110f55760405162461bcd60e51b81526020600482015260126024820152714e6565642e204d6f72652e204d6f6e65792160701b6044820152606401610aea565b60005b858110156111d057600088815261019c60205260408120869161111b848b6160c3565b8152602001908152602001600020548460010154611139919061610e565b10156111805760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420696e76656e746f727960501b6044820152606401610aea565b600088815261019c60205260408120869161119b848b6160c3565b815260200190815260200160002060008282546111b891906160c3565b909155508190506111c88161618c565b9150506110f8565b506111e061019580546001019055565b60006111ec6101955490565b90506111f83382613121565b600061124d8285600001548b8b8b8b6040518060800160405280605c8152602001616278605c91396040518060400160405280600f81526020016e68747470733a2f2f77696e2e736f2f60881b81525061313b565b9050611259828261318a565b6040805160c0810182528a815260208082018b81528284018b8152606084018b815260006080860181815260a087018281528a835261019d87528883209751885594516001888101919091559351600288015591516003870155905160049095018054935115156101000261ff00199615159690961661ffff1990941693909317949094179091558c835261019e825292822080549384018155825290200182905561130c6113053390565b8a846128e4565b604080518a8152602081018490527fe04083eb622e3cb7d063f319076c83270c24acb409a3bc13abcfb36af60f8617910160405180910390a150925050505b949350505050565b61135d3382613215565b6113795760405162461bcd60e51b8152600401610aea90616027565b610e5f8383836132fb565b6060611391848484612f8e565b600084815261019b60209081526040808320815160c08101835281548152600182015493810193909352600281015491830191909152600381015460ff80821615156060850152610100909104161515608083015260048101805460a0840191906113fb90616151565b80601f016020809104026020016040519081016040528092919081815260200182805461142790616151565b80156114745780601f1061144957610100808354040283529160200191611474565b820191906000526020600020905b81548152906001019060200180831161145757829003601f168201915b50505050508152505090506000836001600160401b0381111561149957611499616229565b6040519080825280602002602001820160405280156114c2578160200160208202803683370190505b50905060005b8481101561153757600087815261019c60205260408120906114ea83896160c3565b8152602001908152602001600020548360200151611508919061610e565b82828151811061151a5761151a616213565b60209081029190910101528061152f8161618c565b9150506114c8565b5095945050505050565b600061154c83611e84565b82106115ae5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610aea565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b600081815261019b60205260409020600381015481546001830154600284015460048501805460ff61010087048116979596949593941692606092909161161d90616151565b80601f016020809104026020016040519081016040528092919081815260200182805461164990616151565b80156116965780601f1061166b57610100808354040283529160200191611696565b820191906000526020600020905b81548152906001019060200180831161167957829003601f168201915b505050505091505091939550919395565b6101315460ff166116f15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aea565b610163546001600160a01b0316331461171c5760405162461bcd60e51b8152600401610aea90615ff2565b6117246134a2565b565b610e5f838383604051806020016040528060008152506123da565b6000838152610199602052604090205483906001600160a01b0316336001600160a01b0316146117835760405162461bcd60e51b8152600401610aea90615f4b565b6117c283838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061353792505050565b6000848152610199602052604090206117df9060010184846151a7565b507fb252d91e8d424ba6f9f1647d21d7b0bbd8e2a3cbb318aaecb0d735fba9f62c7f84848460405161101993929190615e35565b600081815261019960205260409020805460018201805460ff600160a81b84048116946001600160a01b03851694600160a01b90049091169260609261185890616151565b80601f016020809104026020016040519081016040528092919081815260200182805461188490616151565b80156118d15780601f106118a6576101008083540402835291602001916118d1565b820191906000526020600020905b8154815290600101906020018083116118b457829003601f168201915b50505050509150509193509193565b600085815261019b6020908152604080832054835261019990915290205485906001600160a01b0316336001600160a01b0316146119305760405162461bcd60e51b8152600401610aea90615fbb565b600086815261019b60205260409020600181018690556002810185905561195b6004820185856151a7565b507f0cdd46b7a456c1e6514d3c451f487eb2ea5039ac3f54fc210e98ce69ecdb00758787878787604051611993959493929190615e8d565b60405180910390a150505050505050565b60006119af60995490565b8210611a125760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610aea565b60998281548110611a2557611a25616213565b90600052602060002001549050919050565b600081815261019b6020908152604080832054835261019990915290205481906001600160a01b0316336001600160a01b031614611a875760405162461bcd60e51b8152600401610aea90615fbb565b600082815261019b6020908152604091829020600301805460ff191660019081179091558251858152918201527ff95c289b48e2e0dc7c8f639934e871675404b92cf01f600493194c43e7949e859101610b40565b6101315460ff1615611b005760405162461bcd60e51b8152600401610aea90615f91565b85611b0a81613588565b611b2c81604051806060016040528060228152602001616256602291396135ee565b611b6b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061353792505050565b6000818484604051602001611b8293929190615952565b60408051808303601f190181529181528151602092830120600081815261019b909352912060030154909150610100900460ff1615611bfa5760405162461bcd60e51b8152602060048201526014602482015273537061636520616c72656164792065786973747360601b6044820152606401610aea565b6040518060c00160405280838152602001888152602001878152602001861515815260200160011515815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505083815261019b6020908152604091829020845181558482015160018201559184015160028301556060840151600383018054608087015115156101000261ff00199315159390931661ffff199091161791909117905560a08401518051929350611cd39260048501929190910190615227565b505050600082815261019a6020908152604080832080546001810182559084529190922001829055517f335958c15e70938d2bfae6c90457d7732a3e398f2423c491dc6503b67334745a90611d3590839085908b908b908b908b908b90615e01565b60405180910390a15050505050505050565b6000818152606760205260408120546001600160a01b031680610c2e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610aea565b600081815261019d60205260408120548190819081908190606090611de2906115d7565b949c939b5091995097509550909350915050565b6000818152610199602052604090205481906001600160a01b0316336001600160a01b031614611e385760405162461bcd60e51b8152600401610aea90615f4b565b6000828152610199602052604090819020805460ff60a81b19169055517f9cb52f05776b0f321eb9ca8c9e1b26b978036072417bf384bd406189f43864f890610b409084815260200190565b60006001600160a01b038216611eef5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610aea565b506001600160a01b031660009081526068602052604090205490565b610163546001600160a01b03163314611f365760405162461bcd60e51b8152600401610aea90615ff2565b6117246000613628565b600054610100900460ff16611f5b5760005460ff1615611f5f565b303b155b611fc25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610aea565b600054610100900460ff16158015611fe4576000805461ffff19166101011790555b6120336040518060400160405280600e81526020016d5374617920416d7374657264616d60901b8152506040518060400160405280600781526020016653544159414d5360c81b81525061367b565b61207c6040518060400160405280600e81526020016d5374617920416d7374657264616d60901b815250604051806040016040528060018152602001603160f81b8152506136ac565b6120846136dd565b61208c6136dd565b612094613704565b61209c613733565b80156120ae576000805461ff00191690555b50565b6101315460ff16156120d55760405162461bcd60e51b8152600401610aea90615f91565b610163546001600160a01b031633146121005760405162461bcd60e51b8152600401610aea90615ff2565b611724613762565b6000828152610199602052604090205482906001600160a01b0316336001600160a01b03161461214a5760405162461bcd60e51b8152600401610aea90615f4b565b6001600160a01b03821660009081526101986020526040902061216d90846137bc565b50600083815261019960209081526040808320546001600160a01b03168352610198909152902061219e90846137c8565b506000838152610199602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915185815282917f11a520c5c4bfade8b450399ea67096dba36478d23d9a45f02e32989cfe307dde91015b60405180910390a3505050565b600081815261019a602090815260409182902080548351818402810184019094528084526060939283018282801561225d57602002820191906000526020600020905b815481526020019060010190808311612249575b50505050509050919050565b606060668054610c4390616151565b600081815261019b6020908152604080832054835261019990915290205481906001600160a01b0316336001600160a01b0316146122c85760405162461bcd60e51b8152600401610aea90615fbb565b600082815261019b60209081526040808320600301805460ff191690558051858152918201929092527ff95c289b48e2e0dc7c8f639934e871675404b92cf01f600493194c43e7949e859101610b40565b6123243383836137d4565b5050565b6000818152610199602052604090205481906001600160a01b0316336001600160a01b03161461236a5760405162461bcd60e51b8152600401610aea90615f4b565b6000828152610199602052604090819020805460ff60a01b1916600160a01b179055517f5c33859dfe8722791b5d72ad942a0895181f8a694288ec429394f620de15032090610b409084906001909182521515602082015260400190565b60606123d5610196612f83565b905090565b6123e43383613215565b6124005760405162461bcd60e51b8152600401610aea90616027565b61240c8484848461389b565b50505050565b600082815261019e60205260408120606091805b82548110156124ae57846002811115612441576124416161e7565b61247784838154811061245657612456616213565b90600052602060002001546000908152610130602052604090205460ff1690565b6002811115612488576124886161e7565b141561249c57816124988161618c565b9250505b806124a68161618c565b915050612426565b506000816001600160401b038111156124c9576124c9616229565b6040519080825280602002602001820160405280156124f2578160200160208202803683370190505b5090506000805b845481101561259a57866002811115612514576125146161e7565b61252986838154811061245657612456616213565b600281111561253a5761253a6161e7565b14156125885784818154811061255257612552616213565b906000526020600020015483838151811061256f5761256f616213565b6020908102919091010152816125848161618c565b9250505b806125928161618c565b9150506124f9565b50909695505050505050565b6060610c2e826138ce565b6101315460ff16156125d55760405162461bcd60e51b8152600401610aea90615f91565b610e5f8383836000612988565b60006125ed82613a3d565b600084815261019d60205260409020805491925090806126405760405162461bcd60e51b815260206004820152600e60248201526d14dd185e481b9bdd08199bdd5b9960921b6044820152606401610aea565b600482015460ff161561268a5760405162461bcd60e51b815260206004820152601260248201527120b63932b0b23c9031b432b1b5b2b21034b760711b6044820152606401610aea565b600081815261019b60209081526040808320805484526101999092529091206126b287611d47565b6001600160a01b0316856001600160a01b031614806126dd575080546001600160a01b038681169116145b6127295760405162461bcd60e51b815260206004820152601d60248201527f566f7563686572207369676e6572206973206e6f7420616c6c6f7765640000006044820152606401610aea565b60208601516001600160a01b0316336001600160a01b03161461277d5760405162461bcd60e51b815260206004820152600c60248201526b2bb937b7339031b0b63632b960a11b6044820152606401610aea565b60028401548454600090815261012f602090815260408083206001600160a01b038a16845282528083208b845290915281205490916127bb916160db565b60048601805460ff1916600117905590506127eb6127d889611d47565b83546001600160a01b031683878c613b4b565b6040518881527fdf06c27528e294967ba5e32e69b9c5fe102a58c699c44740c2c4c6afc719253590602001611d35565b61019b602052600090815260409020805460018201546002830154600384015460048501805494959394929360ff80841694610100909404169290919061286190616151565b80601f016020809104026020016040519081016040528092919081815260200182805461288d90616151565b80156128da5780601f106128af576101008083540402835291602001916128da565b820191906000526020600020905b8154815290600101906020018083116128bd57829003601f168201915b5050505050905086565b610e5f838383613bd3565b610163546001600160a01b0316331461291a5760405162461bcd60e51b8152600401610aea90615ff2565b6001600160a01b03811661297f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aea565b6120ae81613628565b6101315460ff16156129ac5760405162461bcd60e51b8152600401610aea90615f91565b6129eb84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061353792505050565b6000338585604051602001612a0293929190615926565b60408051808303601f1901815291815281516020928301206000818152610199909352912054909150600160a81b900460ff1615612a825760405162461bcd60e51b815260206004820152601760248201527f466163696c69747920616c7265616479206578697374730000000000000000006044820152606401610aea565b6040518060a00160405280612a943390565b6001600160a01b03168152602001841515815260200160011515815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0380861660209384015284825261019983526040918290208451815486860151948701511515600160a81b0260ff60a81b19951515600160a01b026001600160a81b031990921692909416919091171792909216178155606083015180519192612b6492600185019290910190615227565b5060809190910151600290910180546001600160a01b0319166001600160a01b03909216919091179055612b9a610196826137bc565b5033600090815261019860205260409020612bb590826137bc565b50336001600160a01b03167f28c9a25063d40c8cf423202182ed575cc97982c1fd1771bd9721e19a38cc491d828787604051612bf393929190615e35565b60405180910390a25050505050565b61019960205260009081526040902080546001820180546001600160a01b0383169360ff600160a01b8504811694600160a81b900416929091612c4490616151565b80601f0160208091040260200160405190810160405280929190818152602001828054612c7090616151565b8015612cbd5780601f10612c9257610100808354040283529160200191612cbd565b820191906000526020600020905b815481529060010190602001808311612ca057829003601f168201915b505050600290930154919250506001600160a01b031685565b6060612ce182613c7f565b6001600160401b03811115612cf857612cf8616229565b604051908082528060200260200182016040528015612d21578160200160208202803683370190505b50600083815261019a6020908152604080832080548251818502810185019093528083529495509293909291830182828015612d7c57602002820191906000526020600020905b815481526020019060010190808311612d68575b50505050509050600080600090505b8251811015612e285761019b6000848381518110612dab57612dab616213565b60209081029190910181015182528101919091526040016000206003015460ff1615612e1657828181518110612de357612de3616213565b6020026020010151848381518110612dfd57612dfd616213565b602090810291909101015281612e128161618c565b9250505b80612e208161618c565b915050612d8b565b505050919050565b6001600160a01b03163b151590565b6000805b612e4e610196612eaa565b811015612ea6576101996000612e6661019684612eb4565b8152602081019190915260400160002054600160a01b900460ff1615612e945781612e908161618c565b9250505b80612e9e8161618c565b915050612e43565b5090565b6000610c2e825490565b6000612ec08383613cfe565b9392505050565b60006001600160e01b0319821663780e9d6360e01b1480610c2e5750610c2e82613d28565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612f3e82611d47565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61240c84848484613d78565b6060610c2e82613e2f565b612f9b6202a3004261610e565b612fa883620151806160ef565b612fb6906362155d6e6160c3565b11612ffc5760405162461bcd60e51b8152602060048201526016602482015275111bdb89dd081cdd185e481a5b881d1a19481c185cdd60521b6044820152606401610aea565b600083815261019b60209081526040808320548352610199909152902054600160a01b900460ff166130705760405162461bcd60e51b815260206004820152601c60248201527f4c6f6467696e6720466163696c69747920697320696e616374697665000000006044820152606401610aea565b600083815261019b602052604090206003015460ff166130c65760405162461bcd60e51b8152602060048201526011602482015270537061636520697320696e61637469766560781b6044820152606401610aea565b60008111610e5f5760405162461bcd60e51b815260206004820152602260248201527f4e756d626572206f6620646179732073686f756c642062652031206f72206d6f604482015261726560f01b6064820152608401610aea565b612324828260405180602001604052806000815250613e89565b606061317d61314b8a8585613ebc565b6131588a8a8a8a8a613efd565b604051602001613169929190615c40565b604051602081830303815290604052613f5a565b9998505050505050505050565b61319382612eec565b6131f65760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610aea565b600082815260c9602090815260409091208251610e5f92840190615227565b600061322082612eec565b6132815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610aea565b600061328c83611d47565b9050806001600160a01b0316846001600160a01b031614806132c75750836001600160a01b03166132bc84610cc6565b6001600160a01b0316145b8061134b57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff1661134b565b826001600160a01b031661330e82611d47565b6001600160a01b0316146133725760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610aea565b6001600160a01b0382166133d45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610aea565b6133df838383613f8b565b6133ea600082612f09565b6001600160a01b038316600090815260686020526040812080546001929061341390849061610e565b90915550506001600160a01b03821660009081526068602052604081208054600192906134419084906160c3565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6101315460ff166134ec5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610aea565b610131805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008151116120ae5760405162461bcd60e51b815260206004820152601960248201527f4461746120555249206d7573742062652070726f7669646564000000000000006044820152606401610aea565b60008181526101996020526040902054600160a81b900460ff166120ae5760405162461bcd60e51b815260206004820152601760248201527f466163696c69747920646f6573206e6f742065786973740000000000000000006044820152606401610aea565b6000828152610199602052604090205481906001600160a01b03163314610e5f5760405162461bcd60e51b8152600401610aea9190615ee6565b61016380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166136a25760405162461bcd60e51b8152600401610aea90616078565b6123248282614013565b600054610100900460ff166136d35760405162461bcd60e51b8152600401610aea90616078565b6123248282614061565b600054610100900460ff166117245760405162461bcd60e51b8152600401610aea90616078565b600054610100900460ff1661372b5760405162461bcd60e51b8152600401610aea90616078565b6117246140a2565b600054610100900460ff1661375a5760405162461bcd60e51b8152600401610aea90616078565b6117246140d6565b6101315460ff16156137865760405162461bcd60e51b8152600401610aea90615f91565b610131805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861351a3390565b6000612ec08383614106565b6000612ec08383614155565b816001600160a01b0316836001600160a01b031614156138365760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610aea565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016121f9565b6138a68484846132fb565b6138b284848484614248565b61240c5760405162461bcd60e51b8152600401610aea90615ef9565b60606138d982612eec565b61393f5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610aea565b600082815260c960205260408120805461395890616151565b80601f016020809104026020016040519081016040528092919081815260200182805461398490616151565b80156139d15780601f106139a6576101008083540402835291602001916139d1565b820191906000526020600020905b8154815290600101906020018083116139b457829003601f168201915b5050505050905060006139ef60408051602081019091526000815290565b9050805160001415613a02575092915050565b815115613a34578082604051602001613a1c92919061596c565b60405160208183030381529060405292505050919050565b61134b84614352565b600080613ac17fe14fce867d3bcfe3e7c779de069d9e179b67b9288baf649805c61c495483896b846000015185602001518660400151604051602001613aa694939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405160208183030381529060405280519060200120614429565b9050600080613ad4838660600151614477565b90925090506000816004811115613aed57613aed6161e7565b148015613b06575084516001600160a01b038381169116145b613b435760405162461bcd60e51b815260206004820152600e60248201526d213937b5b2b7103b37bab1b432b960911b6044820152606401610aea565b509392505050565b600082815261019b6020526040902060020154831115613bbf5760405162461bcd60e51b815260206004820152602960248201527f576974686472617720616d6f756e74206e6f7420616c6c6f77656420696e207460448201526868697320737461746560b81b6064820152608401610aea565b613bcc85858585856144e7565b5050505050565b600082815261012f602090815260408083206001600160a01b03871684528252808320848452909152812080543492839291613c109084906160c3565b909155505060008281526101306020908152604091829020805460ff1916905581518381529081018590529081018390526001600160a01b038516907f4eef3d1efb11f00508d9b7bb632ddcfa6da9d7105bd39f404bdd7362e6c59dbc9060600160405180910390a250505050565b600081815261019a60205260408120815b8154811015613cf75761019b6000838381548110613cb057613cb0616213565b6000918252602080832090910154835282019290925260400190206003015460ff1615613ce55782613ce18161618c565b9350505b80613cef8161618c565b915050613c90565b5050919050565b6000826000018281548110613d1557613d15616213565b9060005260206000200154905092915050565b60006001600160e01b031982166380ac58cd60e01b1480613d5957506001600160e01b03198216635b5e139f60e01b145b80610c2e57506301ffc9a760e01b6001600160e01b0319831614610c2e565b600082815261012f602090815260408083206001600160a01b038816845282528083208484528252808320805490849055610130909252909120805460ff191660021790558015613bcc57613dd66001600160a01b0385168261462c565b60408051828152602081018590529081018390526001600160a01b0380861691908716907f89eeb38ad2da123e4b3662ad415c1856733f76deaccee072a5234ab427ffdb70906060015b60405180910390a35050505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561225d57602002820191906000526020600020908154815260200190600101908083116122495750505050509050919050565b613e938383614745565b613ea06000848484614248565b610e5f5760405162461bcd60e51b8152600401610aea90615ef9565b6060613ec784614884565b8383613ed287614884565b604051602001613ee59493929190615b2f565b60405160208183030381529060405290509392505050565b6060613f0886614981565b613f1186614981565b613f1a86614884565b613f2386614884565b613f2c86614884565b604051602001613f4095949392919061599b565b604051602081830303815290604052905095945050505050565b6060613f65826149bc565b604051602001613f759190615c97565b6040516020818303038152906040529050919050565b613f96838383614b0f565b6001600160a01b03831615801590613fb657506001600160a01b03821615155b15610e5f57600081815261019d6020908152604080832054835261012f82528083206001600160a01b0380881685528184528285208686528452828520805490869055908716855290835281842085855290925290912055505050565b600054610100900460ff1661403a5760405162461bcd60e51b8152600401610aea90616078565b815161404d906065906020850190615227565b508051610e5f906066906020840190615227565b600054610100900460ff166140885760405162461bcd60e51b8152600401610aea90616078565b81516020928301208151919092012060fb9190915560fc55565b600054610100900460ff166140c95760405162461bcd60e51b8152600401610aea90616078565b610131805460ff19169055565b600054610100900460ff166140fd5760405162461bcd60e51b8152600401610aea90616078565b61172433613628565b600081815260018301602052604081205461414d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c2e565b506000610c2e565b6000818152600183016020526040812054801561423e57600061417960018361610e565b855490915060009061418d9060019061610e565b90508181146141f25760008660000182815481106141ad576141ad616213565b90600052602060002001549050808760000184815481106141d0576141d0616213565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614203576142036161fd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c2e565b6000915050610c2e565b60006001600160a01b0384163b1561434a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061428c903390899088908890600401615cdc565b602060405180830381600087803b1580156142a657600080fd5b505af19250505080156142d6575060408051601f3d908101601f191682019092526142d391810190615727565b60015b614330573d808015614304576040519150601f19603f3d011682016040523d82523d6000602084013e614309565b606091505b5080516143285760405162461bcd60e51b8152600401610aea90615ef9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061134b565b50600161134b565b606061435d82612eec565b6143c15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610aea565b60006143d860408051602081019091526000815290565b905060008151116143f85760405180602001604052806000815250612ec0565b8061440284614bc7565b60405160200161441392919061596c565b6040516020818303038152906040529392505050565b6000610c2e614436614cc4565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000808251604114156144ae5760208301516040840151606085015160001a6144a287828585614d3f565b945094505050506144e0565b8251604014156144d857602083015160408401516144cd868383614e2c565b9350935050506144e0565b506000905060025b9250929050565b600082815261012f602090815260408083206001600160a01b038916845282528083208484529091529020548311156145575760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b6044820152606401610aea565b600082815261012f602090815260408083206001600160a01b0389168452825280832084845290915290205461458e90849061610e565b600083815261012f602090815260408083206001600160a01b038a811685529083528184208685528352818420949094556101309091529020805460ff191660011790556145de9085168461462c565b60408051848152602081018490529081018290526001600160a01b0380861691908716907f89eeb38ad2da123e4b3662ad415c1856733f76deaccee072a5234ab427ffdb7090606001613e20565b8047101561467c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610aea565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146146c9576040519150601f19603f3d011682016040523d82523d6000602084013e6146ce565b606091505b5050905080610e5f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610aea565b6001600160a01b03821661479b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610aea565b6147a481612eec565b156147f15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610aea565b6147fd60008383613f8b565b6001600160a01b03821660009081526068602052604081208054600192906148269084906160c3565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060816148a85750506040805180820190915260018152600360fc1b602082015290565b8160005b81156148d257806148bc8161618c565b91506148cb9050600a836160db565b91506148ac565b6000816001600160401b038111156148ec576148ec616229565b6040519080825280601f01601f191660200182016040528015614916576020820181803683370190505b5090505b841561134b5761492b60018361610e565b9150614938600a866161a7565b6149439060306160c3565b60f81b81838151811061495857614958616213565b60200101906001600160f81b031916908160001a90535061497a600a866160db565b945061491a565b606061498c82614e65565b614999608084901b614e65565b60405161060f60f31b602082015260228101929092526042820152606201613f75565b60608151600014156149dc57505060408051602081019091526000815290565b60006040518060600160405280604081526020016162d46040913990506000600384516002614a0b91906160c3565b614a1591906160db565b614a209060046160ef565b6001600160401b03811115614a3757614a37616229565b6040519080825280601f01601f191660200182016040528015614a61576020820181803683370190505b509050600182016020820185865187015b80821015614acd576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250614a72565b5050600386510660018114614ae95760028114614afc57614b04565b603d6001830353603d6002830353614b04565b603d60018303535b509195945050505050565b6001600160a01b038316614b6a57614b6581609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b614b8d565b816001600160a01b0316836001600160a01b031614614b8d57614b8d8382615017565b6001600160a01b038216614ba457610e5f816150b4565b826001600160a01b0316826001600160a01b031614610e5f57610e5f8282615163565b606081614beb5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614c155780614bff8161618c565b9150614c0e9050600a836160db565b9150614bef565b6000816001600160401b03811115614c2f57614c2f616229565b6040519080825280601f01601f191660200182016040528015614c59576020820181803683370190505b5090505b841561134b57614c6e60018361610e565b9150614c7b600a866161a7565b614c869060306160c3565b60f81b818381518110614c9b57614c9b616213565b60200101906001600160f81b031916908160001a905350614cbd600a866160db565b9450614c5d565b60006123d57f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f614cf360fb5490565b60fc546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614d765750600090506003614e23565b8460ff16601b14158015614d8e57508460ff16601c14155b15614d9f5750600090506004614e23565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614df3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614e1c57600060019250925050614e23565b9150600090505b94509492505050565b6000806001600160ff1b03831681614e4960ff86901c601b6160c3565b9050614e5787828885614d3f565b935093505050935093915050565b7aff00000000000000ff00000000000000ff00000000000000ff00006bffffffff0000000000000000604083901c90811663ffffffff60c01b84161760201c63ffffffff60601b919091166001600160e01b031984161717601081901c9182167eff00000000000000ff00000000000000ff00000000000000ff000000000000821617600890811c7bff00000000000000ff00000000000000ff00000000000000ff000000939093167fff00000000000000ff00000000000000ff00000000000000ff000000000000009290921691909117919091179081901c7e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f167f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f00600492831c161790614fb3827f06060606060606060606060606060606060606060606060606060606060606066160c3565b901c7f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f166007614fe391906160ef565b61500d827f30303030303030303030303030303030303030303030303030303030303030306160c3565b610c2e91906160c3565b6000600161502484611e84565b61502e919061610e565b600083815260986020526040902054909150808214615081576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b6099546000906150c69060019061610e565b6000838152609a6020526040812054609980549394509092849081106150ee576150ee616213565b90600052602060002001549050806099838154811061510f5761510f616213565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480615147576151476161fd565b6001900381819060005260206000200160009055905550505050565b600061516e83611e84565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b8280546151b390616151565b90600052602060002090601f0160209004810192826151d5576000855561521b565b82601f106151ee5782800160ff1982351617855561521b565b8280016001018555821561521b579182015b8281111561521b578235825591602001919060010190615200565b50612ea692915061529b565b82805461523390616151565b90600052602060002090601f016020900481019282615255576000855561521b565b82601f1061526e57805160ff191683800117855561521b565b8280016001018555821561521b579182015b8281111561521b578251825591602001919060010190615280565b5b80821115612ea6576000815560010161529c565b80356001600160a01b03811681146152c757600080fd5b919050565b803580151581146152c757600080fd5b600082601f8301126152ed57600080fd5b81356001600160401b038082111561530757615307616229565b604051601f8301601f19908116603f0116810190828211818310171561532f5761532f616229565b8160405283815286602085880101111561534857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f84011261537a57600080fd5b5081356001600160401b0381111561539157600080fd5b6020830191508360208285010111156144e057600080fd5b6000602082840312156153bb57600080fd5b612ec0826152b0565b600080604083850312156153d757600080fd5b6153e0836152b0565b91506153ee602084016152b0565b90509250929050565b60008060006060848603121561540c57600080fd5b615415846152b0565b9250615423602085016152b0565b9150604084013590509250925092565b6000806000806080858703121561544957600080fd5b615452856152b0565b9350615460602086016152b0565b92506040850135915060608501356001600160401b0381111561548257600080fd5b61548e878288016152dc565b91505092959194509250565b600080604083850312156154ad57600080fd5b6154b6836152b0565b91506153ee602084016152cc565b6000806000606084860312156154d957600080fd5b6154e2846152b0565b95602085013595506040909401359392505050565b6000806040838503121561550a57600080fd5b615513836152b0565b946020939093013593505050565b60006020828403121561553357600080fd5b5035919050565b6000806040838503121561554d57600080fd5b823591506153ee602084016152b0565b6000806040838503121561557057600080fd5b8235915060208301356003811061558657600080fd5b809150509250929050565b6000806000604084860312156155a657600080fd5b8335925060208401356001600160401b038111156155c357600080fd5b6155cf86828701615368565b9497909650939450505050565b6000806000606084860312156155f157600080fd5b505081359360208301359350604090920135919050565b60008060008060008060a0878903121561562157600080fd5b86359550602087013594506040870135935061563f606088016152cc565b925060808701356001600160401b0381111561565a57600080fd5b61566689828a01615368565b979a9699509497509295939492505050565b60008060008060006080868803121561569057600080fd5b85359450602086013593506040860135925060608601356001600160401b038111156156bb57600080fd5b6156c788828901615368565b969995985093965092949392505050565b600080600080608085870312156156ee57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561571c57600080fd5b8135612ec08161623f565b60006020828403121561573957600080fd5b8151612ec08161623f565b60008060006040848603121561575957600080fd5b83356001600160401b0381111561576f57600080fd5b61577b86828701615368565b909450925061578e9050602085016152cc565b90509250925092565b600080600080606085870312156157ad57600080fd5b84356001600160401b038111156157c357600080fd5b6157cf87828801615368565b90955093506157e29050602086016152cc565b91506157f0604086016152b0565b905092959194509250565b6000806040838503121561580e57600080fd5b8235915060208301356001600160401b038082111561582c57600080fd5b908401906080828703121561584057600080fd5b60405160808101818110838211171561585b5761585b616229565b604052615867836152b0565b8152615875602084016152b0565b60208201526040830135604082015260608301358281111561589657600080fd5b6158a2888286016152dc565b6060830152508093505050509250929050565b600081518084526158cd816020860160208601616125565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815161591c818560208601616125565b9290920192915050565b6bffffffffffffffffffffffff198460601b168152818360148301376000910160140190815292915050565b838152818360208301376000910160200190815292915050565b6000835161597e818460208801616125565b835190830190615992818360208801616125565b01949350505050565b7f2261747472696275746573223a5b7b2274726169745f74797065223a2266616381527134b634ba3ca4b21116113b30b63ab2911d1160711b6020820152600086516159ee816032850160208b01616125565b7f227d2c7b2274726169745f74797065223a2273706163654964222c2276616c756032918401918201526332911d1160e11b60528201528651615a38816056840160208b01616125565b7f227d2c7b2274726169745f74797065223a227374617274446179222c2276616c60569290910191820152643ab2911d1160d91b60768201528551615a8481607b840160208a01616125565b7f227d2c7b2274726169745f74797065223a226e756d6265724f6644617973222c607b929091019182015268113b30b63ab2911d1160b91b609b820152615b23615b14615b0e615ad760a485018961590a565b7f227d2c7b2274726169745f74797065223a227175616e74697479222c2276616c8152643ab2911d1160d91b602082015260250190565b8661590a565b62227d5d60e81b815260030190565b98975050505050505050565b7f226e616d65223a225374617920416d7374657264616d20230000000000000000815260008551615b67816018850160208a01616125565b7f222c226465736372697074696f6e223a2253746179206174206c6f6467696e6760189184019182015273103330b1b4b634ba3c91161134b6b0b3b2911d1160611b60388201528551615bc181604c840160208a01616125565b7111161132bc3a32b93730b62fbab936111d1160711b604c92909101918201528451615bf481605e840160208901616125565b6e746f6b656e733f746f6b656e49643d60881b605e92909101918201528351615c2481606d840160208801616125565b601160f91b606d9290910191820152606e019695505050505050565b607b60f81b815260008351615c5c816001850160208801616125565b600b60fa1b6001918401918201528351615c7d816002840160208801616125565b607d60f81b60029290910191820152600301949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251615ccf81601d850160208701616125565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615d0f908301846158b5565b9695505050505050565b600060018060a01b0380881683528615156020840152851515604084015260a06060840152615d4b60a08401866158b5565b91508084166080840152509695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561259a57835183529284019291840191600101615d7c565b84151581526001600160a01b03841660208201528215156040820152608060608201819052600090615d0f908301846158b5565b8615158152856020820152846040820152836060820152821515608082015260c060a08201526000615b2360c08301846158b5565b878152866020820152856040820152846060820152831515608082015260c060a0820152600061317d60c0830184866158e1565b838152604060208201526000615e4f6040830184866158e1565b95945050505050565b8681528560208201528460408201528315156060820152821515608082015260c060a08201526000615b2360c08301846158b5565b858152846020820152836040820152608060608201526000615eb36080830184866158e1565b979650505050505050565b6020810160038310615ee057634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000612ec060208301846158b5565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f6e6c79206c6f6467696e6720666163696c697479206f776e657220697320616040820152651b1b1bddd95960d21b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601b908201527f4f6e6c79207370616365206f776e657220697320616c6c6f7765640000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082198211156160d6576160d66161bb565b500190565b6000826160ea576160ea6161d1565b500490565b6000816000190483118215151615616109576161096161bb565b500290565b600082821015616120576161206161bb565b500390565b60005b83811015616140578181015183820152602001616128565b8381111561240c5750506000910152565b600181811c9082168061616557607f821691505b6020821081141561618657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156161a0576161a06161bb565b5060010190565b6000826161b6576161b66161d1565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146120ae57600080fdfe4f6e6c7920666163696c697479206f776e6572206d6179206164642053706163657368747470733a2f2f62616679626569616b6a726862676d7635346c346e73647778786364666b7065716833336d343561736d7736726b7768756a727977327161376e342e697066732e647765622e6c696e6b2f746f6b656e2e706e674142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220b39458b0e9f4a0c58242f640c78bd94ae0a1a4c5f32b4a91b1f652ce80efc6d264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkIn(uint256,(address,address,uint256,bytes))": {
        "notice": "CheckIn"
      },
      "checkOut(uint256)": {
        "notice": "CheckOut"
      },
      "deposit(address,bytes32,uint256)": {
        "notice": "Stay escrow"
      },
      "getAllLodgingFacilityIds()": {
        "notice": "Lodging Facilities Getters"
      },
      "newStay(bytes32,uint256,uint256,uint256)": {
        "notice": "Stays"
      },
      "pause()": {
        "notice": "Governance "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2181,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2985,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 337,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 339,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 343,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 347,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 351,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 357,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1198,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1363,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1367,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1370,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1374,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1690,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 1719,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1838,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2801,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "251",
        "type": "t_bytes32"
      },
      {
        "astId": 2803,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "252",
        "type": "t_bytes32"
      },
      {
        "astId": 2941,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5024,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_deposits",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 5029,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_states",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_uint256,t_enum(State)4629)"
      },
      {
        "astId": 218,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_paused",
        "offset": 0,
        "slot": "305",
        "type": "t_bool"
      },
      {
        "astId": 307,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_owner",
        "offset": 0,
        "slot": "355",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/Stays.sol:Stays",
        "label": "__gap",
        "offset": 0,
        "slot": "356",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5280,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_stayTokenIds",
        "offset": 0,
        "slot": "405",
        "type": "t_struct(Counter)3346_storage"
      },
      {
        "astId": 5329,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_lodgingFacilityIds",
        "offset": 0,
        "slot": "406",
        "type": "t_struct(Bytes32Set)4229_storage"
      },
      {
        "astId": 5334,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_facilityIdsByOwner",
        "offset": 0,
        "slot": "408",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)4229_storage)"
      },
      {
        "astId": 5339,
        "contract": "contracts/Stays.sol:Stays",
        "label": "lodgingFacilities",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_bytes32,t_struct(LodgingFacility)5300_storage)"
      },
      {
        "astId": 5344,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_spaceIdsByFacilityId",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 5349,
        "contract": "contracts/Stays.sol:Stays",
        "label": "spaces",
        "offset": 0,
        "slot": "411",
        "type": "t_mapping(t_bytes32,t_struct(Space)5313_storage)"
      },
      {
        "astId": 5355,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_booked",
        "offset": 0,
        "slot": "412",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5360,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_stays",
        "offset": 0,
        "slot": "413",
        "type": "t_mapping(t_uint256,t_struct(Stay)5326_storage)"
      },
      {
        "astId": 5365,
        "contract": "contracts/Stays.sol:Stays",
        "label": "_stayTokens",
        "offset": 0,
        "slot": "414",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(State)4629": {
        "encoding": "inplace",
        "label": "enum IStayEscrow.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)4229_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)4229_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(LodgingFacility)5300_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Stays.LodgingFacility)",
        "numberOfBytes": "32",
        "value": "t_struct(LodgingFacility)5300_storage"
      },
      "t_mapping(t_bytes32,t_struct(Space)5313_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Stays.Space)",
        "numberOfBytes": "32",
        "value": "t_struct(Space)5313_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(State)4629)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum IStayEscrow.State)",
        "numberOfBytes": "32",
        "value": "t_enum(State)4629"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Stay)5326_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Stays.Stay)",
        "numberOfBytes": "32",
        "value": "t_struct(Stay)5326_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)4229_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4228,
            "contract": "contracts/Stays.sol:Stays",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4035_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)3346_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3345,
            "contract": "contracts/Stays.sol:Stays",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LodgingFacility)5300_storage": {
        "encoding": "inplace",
        "label": "struct Stays.LodgingFacility",
        "members": [
          {
            "astId": 5291,
            "contract": "contracts/Stays.sol:Stays",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5293,
            "contract": "contracts/Stays.sol:Stays",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5295,
            "contract": "contracts/Stays.sol:Stays",
            "label": "exists",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5297,
            "contract": "contracts/Stays.sol:Stays",
            "label": "dataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5299,
            "contract": "contracts/Stays.sol:Stays",
            "label": "fren",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)4035_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4030,
            "contract": "contracts/Stays.sol:Stays",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4034,
            "contract": "contracts/Stays.sol:Stays",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Space)5313_storage": {
        "encoding": "inplace",
        "label": "struct Stays.Space",
        "members": [
          {
            "astId": 5302,
            "contract": "contracts/Stays.sol:Stays",
            "label": "lodgingFacilityId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5304,
            "contract": "contracts/Stays.sol:Stays",
            "label": "capacity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5306,
            "contract": "contracts/Stays.sol:Stays",
            "label": "pricePerNightWei",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5308,
            "contract": "contracts/Stays.sol:Stays",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 5310,
            "contract": "contracts/Stays.sol:Stays",
            "label": "exists",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 5312,
            "contract": "contracts/Stays.sol:Stays",
            "label": "dataURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Stay)5326_storage": {
        "encoding": "inplace",
        "label": "struct Stays.Stay",
        "members": [
          {
            "astId": 5315,
            "contract": "contracts/Stays.sol:Stays",
            "label": "spaceId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5317,
            "contract": "contracts/Stays.sol:Stays",
            "label": "startDay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5319,
            "contract": "contracts/Stays.sol:Stays",
            "label": "numberOfDays",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5321,
            "contract": "contracts/Stays.sol:Stays",
            "label": "quantity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5323,
            "contract": "contracts/Stays.sol:Stays",
            "label": "checkIn",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 5325,
            "contract": "contracts/Stays.sol:Stays",
            "label": "checkOut",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}